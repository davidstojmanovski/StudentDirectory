<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyTested.WebApi</name>
    </assembly>
    <members>
        <member name="T:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing model state.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.NoActionAttributes">
            <summary>
            Checks whether the tested action has no attributes of any type. 
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.ActionAttributes(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested action has at least 1 attribute of any type. 
            </summary>
            <param name="withTotalNumberOf">Optional parameter specifying the exact total number of attributes on the tested action.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.ActionAttributes(System.Action{MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder})">
            <summary>
            Checks whether the tested action has at specific attributes. 
            </summary>
            <param name="attributesTestBuilder">Builder for testing specific attributes on the action.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.ModelStateFor``1">
            <summary>
            Provides way to continue test case with specific model state errors.
            </summary>
            <typeparam name="TRequestModel">Request model type to be tested for errors.</typeparam>
            <returns>Response model test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.ValidModelState">
            <summary>
            Checks whether the tested action's provided model state is valid.
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldHave.ShouldHaveTestBuilder`1.InvalidModelState(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested action's provided model state is not valid.
            </summary>
            <param name="withNumberOfErrors">Expected number of errors. If default null is provided, the test builder checks only if any errors are found.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1">
            <summary>
            Class containing methods for testing BadRequestResult, InvalidModelStateResult or BadRequestErrorMessageResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing ConflictResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing NegotiatedContentResult{T} or FormattedContentResult{T}.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing CreatedNegotiatedContentResult{T} or CreatedAtRouteNegotiatedContentResult{T}.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing HttpResponseMessage result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing InternalServerErrorResult or ExceptionResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing JSON Result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing NotFoundResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing null or default value result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing RedirectResult or RedirectToRouteResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing StatusCodeResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Used for testing returned action result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing UnauthorizedResult.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing return type.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
            <summary>
            Class containing methods for testing OkResult and OkNegotiatedContentResult{T}.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.BadRequest">
            <summary>
            Tests whether action result is BadRequestResult, InvalidModelStateResult or BadRequestErrorMessageResult.
            </summary>
            <returns>Bad request test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Conflict">
            <summary>
            Tests whether action result is ConflictResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Content">
            <summary>
            Tests whether action result is NegotiatedContentResult{T} or FormattedContentResult{T}.
            </summary>
            <returns>Content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Created">
            <summary>
            Tests whether action result is CreatedNegotiatedContentResult{T} or CreatedAtRouteNegotiatedContentResult{T}.
            </summary>
            <returns>Created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.HttpResponseMessage">
            <summary>
            Tests whether action result is HttpResponseMessage.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.InternalServerError">
            <summary>
            Tests whether action result is InternalServerErrorResult or ExceptionResult.
            </summary>
            <returns>Internal server error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Json">
            <summary>
            Tests whether action result is JSON Result.
            </summary>
            <returns>JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.NotFound">
            <summary>
            Tests whether action result is NotFoundResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.DefaultValue">
            <summary>
            Tests whether action result is the default value of the type.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Null">
            <summary>
            Tests whether action result is null.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.NotNull">
            <summary>
            Tests whether action result is not null.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Redirect">
            <summary>
            Tests whether action result is RedirectResult or RedirectToRouteResult.
            </summary>
            <returns>Redirect test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.StatusCode">
            <summary>
            Tests whether action result is StatusCodeResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.StatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether action result is StatusCodeResult and is the same as provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Unauthorized">
            <summary>
            Tests whether action result is UnauthorizedResult.
            </summary>
            <returns>Unauthorized result test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.ResultOfType(System.Type)">
            <summary>
            Tests whether action result is of the provided type.
            </summary>
            <param name="returnType">Expected response type.</param>
            <returns>Response model details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.ResultOfType``1">
            <summary>
            Tests whether action result is of the provided generic type.
            </summary>
            <typeparam name="TResponseModel">Expected response type.</typeparam>
            <returns>Response model test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldReturn.ShouldReturnTestBuilder`1.Ok">
            <summary>
            Tests whether action result is plain OkResult.
            </summary>
            <returns>Ok test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Actions.ShouldThrowTestBuilder">
            <summary>
            Used for testing whether action throws exception.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldThrowTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Actions.ShouldThrowTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldThrowTestBuilder.Exception">
            <summary>
            Tests whether action throws any exception.
            </summary>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldThrowTestBuilder.AggregateException(System.Nullable{System.Int32})">
            <summary>
            Tests whether action throws any AggregateException.
            </summary>
            <param name="withNumberOfInnerExceptions">Optional expected number of total inner exceptions.</param>
            <returns>AggregateException test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ShouldThrowTestBuilder.HttpResponseException">
            <summary>
            Tests whether action throws any HttpResponseException.
            </summary>
            <returns>HttpResponseException test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Actions.VoidActionResultTestBuilder">
            <summary>
            Used for testing void actions.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.VoidActionResultTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Actions.VoidActionResultTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.VoidActionResultTestBuilder.ShouldReturnEmpty">
            <summary>
            Tests whether action result is void.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.VoidActionResultTestBuilder.ShouldHave">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <returns>Should have test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.VoidActionResultTestBuilder.ShouldThrow">
            <summary>
            Used for testing whether action throws exception.
            </summary>
            <returns>Should throw test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Actions.ActionResultTestBuilder`1">
            <summary>
            Used for building the action result which will be tested.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ActionResultTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Actions.ActionResultTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ActionResultTestBuilder`1.ShouldHave">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <returns>Should have test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ActionResultTestBuilder`1.ShouldThrow">
            <summary>
            Used for testing whether action throws exception.
            </summary>
            <returns>Should throw test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Actions.ActionResultTestBuilder`1.ShouldReturn">
            <summary>
            Used for testing returned action result.
            </summary>
            <returns>Should return test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.And.AndProvideTestBuilder">
            <summary>
            Provides controller and action information.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.And.AndProvideTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.And.AndProvideTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
        </member>
        <member name="T:MyTested.WebApi.Builders.And.AndProvideTestBuilder`1">
            <summary>
            Provides controller, action and action result information.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.And.AndProvideTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.And.AndProvideTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="T:MyTested.WebApi.Builders.And.AndTestBuilder`1">
            <summary>
            Class containing AndAlso() method allowing additional assertions after model state tests.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.And.AndTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.And.AndTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.And.AndTestBuilder`1.AndAlso">
            <summary>
            Method allowing additional assertions after the model state tests.
            </summary>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder">
            <summary>
            Used for testing action attributes.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.#ctor(System.Web.Http.ApiController,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the attributes will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.ContainingAttributeOfType``1">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.ChangingActionNameTo(System.String)">
            <summary>
            Checks whether the collected attributes contain ActionNameAttribute.
            </summary>
            <param name="actionName">Expected overridden name of the action.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.ChangingRouteTo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the action.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.AllowingAnonymousRequests">
            <summary>
            Checks whether the collected attributes contain AllowAnonymousAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForAuthorizedRequests(System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.DisablingActionCall">
            <summary>
            Checks whether the collected attributes contain NonActionAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethod``1">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <typeparam name="THttpMethod">Attribute of type IActionHttpMethodProvider.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethod(System.String)">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethod">HTTP method provided as string.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethod">HTTP method provided as HttpMethod class.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as collection of strings.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.String[])">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as string parameters.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Collections.Generic.IEnumerable{System.Net.Http.HttpMethod})">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as collection of HttpMethod classes.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Net.Http.HttpMethod[])">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as parameters of HttpMethod class.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ActionAttributesTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining attribute tests.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder">
            <summary>
            Base class for all attribute test builders.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder.#ctor(System.Web.Http.ApiController)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder" /> class.
            </summary>
            <param name="controller">Controller which will be tested.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder.Validations">
            <summary>
            Gets the validation actions for the tested attributes.
            </summary>
            <value>Collection of validation actions for the attributes.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder.ContainingAttributeOfType``1(System.Action{System.String,System.String})">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <param name="failedValidationAction">Action to execute, if the validation fails.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder.ChangingRouteTo(System.String,System.Action{System.String,System.String},System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the action.</param>
            <param name="failedValidationAction">Action to execute, if the validation fails.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder.RestrictingForAuthorizedRequests(System.Action{System.String,System.String},System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="failedValidationAction">Action to execute, if the validation fails.</param>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder.GetAttributeOfType``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets an attribute of the given type from the provided collection of objects and throws exception if such is not found.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <param name="attributes">Collection of attributes.</param>
            <returns>The found attribute of the given type.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder.TryGetAttributeOfType``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets an attribute of the given type from the provided collection of objects.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <param name="attributes">Collection of attributes.</param>
            <returns>The found attribute of the given type or null, if such attribute is not found.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder">
            <summary>
            Used for testing controller attributes.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder.#ctor(System.Web.Http.ApiController)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder" /> class.
            </summary>
            <param name="controller">Controller which will be tested.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder.ContainingAttributeOfType``1">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder.ChangingRouteTo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the action.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder.ChangingRoutePrefixTo(System.String)">
            <summary>
            Checks whether the collected attributes contain RoutePrefixAttribute.
            </summary>
            <param name="prefix">Expected overridden route prefix of the controller.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder.AllowingAnonymousRequests">
            <summary>
            Checks whether the collected attributes contain AllowAnonymousAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder.RestrictingForAuthorizedRequests(System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Attributes.ControllerAttributesTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining attribute tests.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Base.BaseHandlerTestBuilder">
            <summary>
            Base class for handler test builders.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseHandlerTestBuilder.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Base.BaseHandlerTestBuilder" /> class.
            </summary>
            <param name="handler">Instance of the HttpMessageHandler to be tested.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Base.BaseHandlerTestBuilder.Handler">
            <summary>
            Gets the HTTP message handler used in the testing.
            </summary>
            <value>Instance of HttpMessageHandler.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseHandlerTestBuilder.AndProvideTheHandler">
            <summary>
            Gets the HTTP message handler used in the testing.
            </summary>
            <returns>Instance of HttpMessageHandler.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseHandlerTestBuilder.SetInnerHandler(System.Net.Http.HttpMessageHandler)">
            <summary>
            Sets inner HTTP message handler to the current message handler.
            </summary>
            <param name="innerHandler">Instance of HttpMessageHandler.</param>
        </member>
        <member name="T:MyTested.WebApi.Builders.Base.BaseTestBuilder">
            <summary>
            Base class for all test builders.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilder.#ctor(System.Web.Http.ApiController,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Base.BaseTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which will be tested.</param>
            <param name="controllerAttributes">Collected attributes from the tested controller.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Base.BaseTestBuilder.Controller">
            <summary>
            Gets the controller on which the action will be tested.
            </summary>
            <value>Controller on which the action will be tested.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilder.AndProvideTheController">
            <summary>
            Gets the controller on which the action is tested.
            </summary>
            <returns>ASP.NET Web API controller on which the action is tested.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilder.AndProvideTheHttpRequestMessage">
            <summary>
            Gets the HTTP request message with which the action will be tested.
            </summary>
            <returns>HttpRequestMessage from the tested controller.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilder.AndProvideTheHttpConfiguration">
            <summary>
            Gets the HTTP configuration with which the action will be tested.
            </summary>
            <returns>HttpConfiguration from the tested controller.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilder.AndProvideTheControllerAttributes">
            <summary>
            Gets the attributes on the tested controller..
            </summary>
            <returns>IEnumerable of object representing the attributes or null, if no attributes were collected on the controller.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Base.BaseTestBuilderWithAction">
            <summary>
            Base class for all test builders with action call.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithAction.#ctor(System.Web.Http.ApiController,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Base.BaseTestBuilderWithAction" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Base.BaseTestBuilderWithAction.ActionName">
            <summary>
            Gets the action name which will be tested.
            </summary>
            <value>Action name to be tested.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithAction.AndProvideTheActionName">
            <summary>
            Gets the action name which will be tested.
            </summary>
            <returns>Action name to be tested.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithAction.AndProvideTheActionAttributes">
            <summary>
            Gets the action attributes on the called action.
            </summary>
            <returns>IEnumerable of object representing the attributes or null, if no attributes were collected on the action.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithAction.CheckValidModelState">
            <summary>
            Tests whether the tested action's model state is valid.
            </summary>
        </member>
        <member name="T:MyTested.WebApi.Builders.Base.BaseTestBuilderWithCaughtException">
            <summary>
            Base class for test builders with caught exception.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithCaughtException.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Base.BaseTestBuilderWithCaughtException" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithCaughtException.AndProvideTheCaughtException">
            <summary>
            Gets the thrown exception in the tested action.
            </summary>
            <returns>The exception instance or null, if no exception was caught.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithCaughtException.NewAndProvideTestBuilder">
            <summary>
            Creates new AndProvideTestBuilder.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1">
            <summary>
            Base class for all test builders with action result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
            <param name="actionAttributes">Collected action attributes from the method call.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1.ActionResult">
            <summary>
            Gets the action result which will be tested.
            </summary>
            <value>Action result to be tested.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1.AndProvideTheActionResult">
            <summary>
            Gets the action result which will be tested.
            </summary>
            <returns>Action result to be tested.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1.GetActualModel``1">
            <summary>
            Gets response model from action result.
            </summary>
            <typeparam name="TResponseModel">Type of response model.</typeparam>
            <returns>The response model.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1.NewAndTestBuilder">
            <summary>
            Initializes new instance of builder providing AndAlso method.
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1.NewAndProvideTestBuilder">
            <summary>
            Creates new AndProvideTestBuilder.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithActionResult`1.GetActionResultAsDynamic">
            <summary>
            Returns the actual action result casted as dynamic type.
            </summary>
            <returns>Object of dynamic type.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Base.BaseTestBuilderWithModel`1">
            <summary>
            Base class for all test builders with model.
            </summary>
            <typeparam name="TModel">Model returned from action result.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithModel`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Base.BaseTestBuilderWithModel`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="model">Model returned from action result.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Base.BaseTestBuilderWithModel`1.AndProvideTheModel">
            <summary>
            Gets the model returned from an action result.
            </summary>
            <returns>Model returned from action result.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Attributes.IAndActionAttributesTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the attribute tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IAndActionAttributesTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining attribute tests.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder">
            <summary>
            Used for testing action attributes.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.ContainingAttributeOfType``1">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.ChangingActionNameTo(System.String)">
            <summary>
            Checks whether the collected attributes contain ActionNameAttribute.
            </summary>
            <param name="actionName">Expected overridden name of the action.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.ChangingRouteTo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the action.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.AllowingAnonymousRequests">
            <summary>
            Checks whether the collected attributes contain AllowAnonymousAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForAuthorizedRequests(System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.DisablingActionCall">
            <summary>
            Checks whether the collected attributes contain NonActionAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethod``1">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <typeparam name="THttpMethod">Attribute of type IActionHttpMethodProvider.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethod(System.String)">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethod">HTTP method provided as string.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP method (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethod">HTTP method provided as HttpMethod class.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as collection of strings.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.String[])">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as string parameters.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Collections.Generic.IEnumerable{System.Net.Http.HttpMethod})">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as collection of HttpMethod classes.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder.RestrictingForRequestsWithMethods(System.Net.Http.HttpMethod[])">
            <summary>
            Checks whether the collected attributes restrict the request to a specific HTTP methods (AcceptVerbsAttribute or the specific HttpGetAttribute, HttpPostAttribute, etc.).
            </summary>
            <param name="httpMethods">HTTP methods provided as parameters of HttpMethod class.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Attributes.IAndControllerAttributesTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the attribute tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IAndControllerAttributesTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining attribute tests.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder">
            <summary>
            Used for testing controller attributes.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.ContainingAttributeOfType``1">
            <summary>
            Checks whether the collected attributes contain the provided attribute type.
            </summary>
            <typeparam name="TAttribute">Type of expected attribute.</typeparam>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.ChangingRouteTo(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether the collected attributes contain RouteAttribute.
            </summary>
            <param name="template">Expected overridden route template of the controller.</param>
            <param name="withName">Optional expected route name.</param>
            <param name="withOrder">Optional expected route order.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.ChangingRoutePrefixTo(System.String)">
            <summary>
            Checks whether the collected attributes contain RoutePrefixAttribute.
            </summary>
            <param name="prefix">Expected overridden route prefix of the controller.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.AllowingAnonymousRequests">
            <summary>
            Checks whether the collected attributes contain AllowAnonymousAttribute.
            </summary>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder.RestrictingForAuthorizedRequests(System.String,System.String)">
            <summary>
            Checks whether the collected attributes contain AuthorizeAttribute.
            </summary>
            <param name="withAllowedRoles">Optional expected authorized roles.</param>
            <param name="withAllowedUsers">Optional expected authorized users.</param>
            <returns>The same attributes test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Base.IBaseHandlerTestBuilder">
            <summary>
            Base class for handler test builders.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseHandlerTestBuilder.AndProvideTheHandler">
            <summary>
            Gets the HTTP message handler used in the testing.
            </summary>
            <returns>Instance of HttpMessageHandler.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithAction">
            <summary>
            Base class for all test builders with action call.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithAction.AndProvideTheActionName">
            <summary>
            Gets the action name which will be tested.
            </summary>
            <returns>Action name to be tested.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithAction.AndProvideTheActionAttributes">
            <summary>
            Gets the action attributes on the called action.
            </summary>
            <returns>IEnumerable of object representing the attributes or null, if no attributes were collected on the action.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilder">
            <summary>
            Base interface for all test builders.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilder.AndProvideTheController">
            <summary>
            Gets the controller on which the action is tested.
            </summary>
            <returns>ASP.NET Web API controller on which the action is tested.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilder.AndProvideTheHttpConfiguration">
            <summary>
            Gets the HTTP configuration with which the action will be tested.
            </summary>
            <returns>HttpConfiguration from the tested controller.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilder.AndProvideTheHttpRequestMessage">
            <summary>
            Gets the HTTP request message with which the action will be tested.
            </summary>
            <returns>HttpRequestMessage from the tested controller.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilder.AndProvideTheControllerAttributes">
            <summary>
            Gets the attributes on the tested controller..
            </summary>
            <returns>IEnumerable of object representing the attributes or null, if no attributes were collected on the controller.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithModel`1">
            <summary>
            Base interface for all test builders with model.
            </summary>
            <typeparam name="TModel">Model returned from action result.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithModel`1.AndProvideTheModel">
            <summary>
            Gets the model returned from an action result.
            </summary>
            <returns>Model returned from action result.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithCaughtException">
            <summary>
            Base interface for test builders with caught exception.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithCaughtException.AndProvideTheCaughtException">
            <summary>
            Gets the thrown exception in the tested action.
            </summary>
            <returns>The exception instance or null, if no exception was caught.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithActionResult`1">
            <summary>
            Base interface for all test builders with action result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Base.IBaseTestBuilderWithActionResult`1.AndProvideTheActionResult">
            <summary>
            Gets the tested action result.
            </summary>
            <returns>Tested action result.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Controllers.IControllerTestBuilder">
            <summary>
            Used for testing controllers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Controllers.IControllerTestBuilder.NoAttributes">
            <summary>
            Checks whether the tested controller has no attributes of any type. 
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Controllers.IControllerTestBuilder.Attributes(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested controller has at least 1 attribute of any type. 
            </summary>
            <param name="withTotalNumberOf">Optional parameter specifying the exact total number of attributes on the tested controller.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Controllers.IControllerTestBuilder.Attributes(System.Action{MyTested.WebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder})">
            <summary>
            Checks whether the tested controller has at specific attributes. 
            </summary>
            <param name="attributesTestBuilder">Builder for testing specific attributes on the controller.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Controllers.IAndControllerBuilder`1">
            <summary>
            Used for adding AndAlso() method to controller builder.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Controllers.IAndControllerBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when building controller instance.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IAggregateExceptionTestBuilder">
            <summary>
            Used for testing AggregateException.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IAggregateExceptionTestBuilder.ContainingInnerExceptionOfType``1">
            <summary>
            Tests whether AggregateException contains inner exception of the provided type.
            </summary>
            <typeparam name="TInnerException">Expected inner exception type.</typeparam>
            <returns>The same aggregate exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IAndAggregateExceptionTestBuilder">
            <summary>
            Used for adding AndAlso() method to the aggregate exception tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IAndAggregateExceptionTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining aggregate exception tests.
            </summary>
            <returns>The same aggregate exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IBaseExceptionTestBuilder">
            <summary>
            Used for testing expected exception messages.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IBaseExceptionTestBuilder.WithMessage">
            <summary>
            Tests exception message using test builder.
            </summary>
            <returns>Exception message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IBaseExceptionTestBuilder.WithMessage(System.String)">
            <summary>
            Tests exception message whether it is equal to the provided message as string.
            </summary>
            <param name="message">Expected exception message as string.</param>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IBaseExceptionTestBuilder.WithMessage(System.Action{System.String})">
            <summary>
            Tests exception message whether it passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on message.</param>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IBaseExceptionTestBuilder.WithMessage(System.Func{System.String,System.Boolean})">
            <summary>
            Tests exception message whether it passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the message.</param>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IAndExceptionTestBuilder">
            <summary>
            Used for adding AndAlso() method to the expected exception tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IAndExceptionTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining expected exception tests.
            </summary>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder">
            <summary>
            Used for testing specific exception messages.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder.ThatEquals(System.String)">
            <summary>
            Tests whether particular exception message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular exception.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder.BeginningWith(System.String)">
            <summary>
            Tests whether particular exception message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder.EndingWith(System.String)">
            <summary>
            Tests whether particular exception message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IExceptionMessageTestBuilder.Containing(System.String)">
            <summary>
            Tests whether particular exception message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IExceptionTestBuilder">
            <summary>
            Used for testing expected exceptions.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IExceptionTestBuilder.OfType``1">
            <summary>
            Tests whether certain type of exception is returned from the invoked action.
            </summary>
            <typeparam name="TException">Type of the expected exception.</typeparam>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IHttpResponseExceptionTestBuilder">
            <summary>
            Used for testing expected HttpResponseException.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IHttpResponseExceptionTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether caught HttpResponseException has the same status code as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.ExceptionErrors.IHttpResponseExceptionTestBuilder.WithHttpResponseMessage">
            <summary>
            Provides methods to test whether caught HttpResponseException has specific HttpResponseMessage.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IAndHttpHandlerResponseMessageWithTimeTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the HTTP response message with response time tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IAndHttpHandlerResponseMessageWithTimeTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining HTTP response message with response time tests.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageWithTimeTestBuilder">
            <summary>
            Used for testing HTTP response message with response time measurements.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageWithTimeTestBuilder.WithResponseTime(System.Action{System.TimeSpan})">
            <summary>
            Tests whether the measured response time passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the measured response time.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageWithTimeTestBuilder.WithResponseTime(System.Func{System.TimeSpan,System.Boolean})">
            <summary>
            Tests whether the measured response time passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the measured response time.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageWithTimeTestBuilder.AndProvideTheResponseTime">
            <summary>
            Gets the response time measured in the testing.
            </summary>
            <returns>Instance of TimeSpan.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IAndHttpHandlerResponseMessageTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the HTTP response message tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IAndHttpHandlerResponseMessageTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining HTTP response message tests.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IAndHttpResponseMessageTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the HTTP response message tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IAndHttpResponseMessageTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining HTTP response message tests.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder">
            <summary>
            Used for testing HTTP response message results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithResponseModelOfType``1">
            <summary>
            Tests whether certain type of response model is returned from the HTTP response message object content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithResponseModel``1(``0)">
            <summary>
            Tests whether a deeply equal object to the provided one is returned from the HTTP response message object content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithContentOfType``1">
            <summary>
            Tests whether the content of the HTTP response message is of certain type.
            </summary>
            <typeparam name="TContentType">Type of expected HTTP content.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithStringContent(System.String)">
            <summary>
            Tests whether the content of the HTTP response message is the provided string.
            </summary>
            <param name="content">Expected string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithStringContent(System.Action{System.String})">
            <summary>
            Tests whether HTTP response message string content passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithStringContent(System.Func{System.String,System.Boolean})">
            <summary>
            Tests whether HTTP response message string content passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether the HTTP response message has the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithMediaTypeFormatterOfType``1">
            <summary>
            Tests whether the HTTP response message has the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithDefaultMediaTypeFormatter">
            <summary>
            Tests whether the HTTP response message contains the default media type formatter provided by the framework.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.ContainingHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name.
            </summary>
            <param name="name">Name of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.ContainingHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="value">Value of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.ContainingHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="values">Collection of values in the expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.ContainingHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains response headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing response headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.ContainingContentHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains content header with certain name.
            </summary>
            <param name="name">Name of expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.ContainingContentHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains content header with certain name and value.
            </summary>
            <param name="name">Name of expected content header.</param>
            <param name="value">Value of expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.ContainingContentHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains content header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected content header.</param>
            <param name="values">Collection of values in the expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.ContainingContentHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains content headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing content headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether HTTP response message status code is the same as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">Expected status code.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithVersion(System.String)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version as string.
            </summary>
            <param name="version">Expected version as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="major">Major number in the expected version.</param>
            <param name="minor">Minor number in the expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithVersion(System.Version)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="version">Expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithReasonPhrase(System.String)">
            <summary>
            Tests whether HTTP response message reason phrase is the same as the provided reason phrase as string.
            </summary>
            <param name="reasonPhrase">Expected reason phrase as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.WithSuccessStatusCode">
            <summary>
            Tests whether HTTP response message returns success status code between 200 and 299.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder.AndProvideTheHttpResponseMessage">
            <summary>
            Gets the HTTP request message used in the handler testing.
            </summary>
            <returns>Instance of HttpRequestMessage.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder">
            <summary>
            Used for testing HTTP response message results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithResponseModelOfType``1">
            <summary>
            Tests whether certain type of response model is returned from the HTTP response message object content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithResponseModel``1(``0)">
            <summary>
            Tests whether a deeply equal object to the provided one is returned from the HTTP response message object content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithContentOfType``1">
            <summary>
            Tests whether the content of the HTTP response message is of certain type.
            </summary>
            <typeparam name="TContentType">Type of expected HTTP content.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithStringContent(System.String)">
            <summary>
            Tests whether the content of the HTTP response message is the provided string.
            </summary>
            <param name="content">Expected string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithStringContent(System.Action{System.String})">
            <summary>
            Tests whether HTTP response message string content passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithStringContent(System.Func{System.String,System.Boolean})">
            <summary>
            Tests whether HTTP response message string content passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether the HTTP response message has the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithMediaTypeFormatterOfType``1">
            <summary>
            Tests whether the HTTP response message has the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithDefaultMediaTypeFormatter">
            <summary>
            Tests whether the HTTP response message contains the default media type formatter provided by the framework.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name.
            </summary>
            <param name="name">Name of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="value">Value of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="values">Collection of values in the expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains response headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing response headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingContentHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains content header with certain name.
            </summary>
            <param name="name">Name of expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingContentHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains content header with certain name and value.
            </summary>
            <param name="name">Name of expected content header.</param>
            <param name="value">Value of expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingContentHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains content header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected content header.</param>
            <param name="values">Collection of values in the expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.ContainingContentHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains content headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing content headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether HTTP response message status code is the same as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">Expected status code.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithVersion(System.String)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version as string.
            </summary>
            <param name="version">Expected version as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="major">Major number in the expected version.</param>
            <param name="minor">Minor number in the expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithVersion(System.Version)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="version">Expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithReasonPhrase(System.String)">
            <summary>
            Tests whether HTTP response message reason phrase is the same as the provided reason phrase as string.
            </summary>
            <param name="reasonPhrase">Expected reason phrase as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.WithSuccessStatusCode">
            <summary>
            Tests whether HTTP response message returns success status code between 200 and 299.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpResponseMessageTestBuilder.AndProvideTheHttpResponseMessage">
            <summary>
            Gets the HTTP response message used in the testing.
            </summary>
            <returns>Instance of HttpResponseMessage.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Identity.IAndUserBuilder">
            <summary>
            Used for adding AndAlso() method to the the built user.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Identity.IAndUserBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when building user.
            </summary>
            <returns>The same user builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder">
            <summary>
            Used for building mocked Controller.User object.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder.WithIdentifier(System.String)">
            <summary>
            Used for setting ID to the mocked user object.
            </summary>
            <param name="identifier">The user Id to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder.WithUsername(System.String)">
            <summary>
            Used for setting username to the mocked user object.
            </summary>
            <param name="username">The username to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder.WithAuthenticationType(System.String)">
            <summary>
            Used for setting authentication type to the mocked user object.
            </summary>
            <param name="authenticationType">The authentication type to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder.WithClaim(System.Security.Claims.Claim)">
            <summary>
            Used for adding claim to the mocked user object.
            </summary>
            <param name="claim">The user claim to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder.InRole(System.String)">
            <summary>
            Used for adding user role to the mocked user object.
            </summary>
            <param name="role">The user role to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder.InRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used for adding multiple user roles to the mocked user object.
            </summary>
            <param name="roles">Collection of roles to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder.InRoles(System.String[])">
            <summary>
            Used for adding multiple user roles to the mocked user object.
            </summary>
            <param name="roles">Roles to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder">
            <summary>
            Used for adding inner HTTP message handlers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder.WithInnerHandler``1">
            <summary>
            Sets inner HTTP handler to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder.WithInnerHandler``1(``0)">
            <summary>
            Sets the provided instance as an inner HTTP handler to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="innerHandler">Instance of type HttpMessageHandler.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder.WithInnerHandler``1(System.Func{``0})">
            <summary>
            Sets inner HTTP handler by using construction function to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="construction">Construction function returning the instantiated inner HttpMessageHandler.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder.WithInnerHandler``1(System.Action{MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder})">
            <summary>
            Sets inner HTTP handler by using builder to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="httpMessageHandlerBuilder">Inner HttpMessageHandler builder.</param>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Handlers.IHttpMessageHandlerTestBuilder">
            <summary>
            Used for testing HTTP message handlers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Handlers.IHttpMessageHandlerTestBuilder.ShouldReturnHttpResponseMessage">
            <summary>
            Tests the HTTP handler for returning HTTP response message successfully.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Handlers.IHttpMessageHandlerTestBuilder.AndProvideTheHttpRequestMessage">
            <summary>
            Gets the HTTP request message used in the testing.
            </summary>
            <returns>Instance of HttpRequestMessage.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IAndOkTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the ok response tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IAndOkTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining ok tests.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder">
            <summary>
            Used for testing ok result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.WithNoResponseModel">
            <summary>
            Tests whether no response model is returned from the invoked action.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.WithDefaultContentNegotiator">
            <summary>
            Tests whether ok result has the default content negotiator.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether ok result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether ok result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether ok result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether ok result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingDefaultFormatters">
            <summary>
            Tests whether ok result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether ok result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether ok result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Ok.IOkTestBuilder.ContainingMediaTypeFormatters(System.Action{MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether ok result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IAndContentTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the content response tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IAndContentTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining content tests.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder">
            <summary>
            Used for testing content result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether content result has the same status code as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithMediaType(System.String)">
            <summary>
            Tests whether content result has the same content type as the provided string.
            </summary>
            <param name="mediaType">Media type as string.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithMediaType(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Tests whether content result has the same content type as the provided MediaTypeHeaderValue.
            </summary>
            <param name="mediaType">Media type as MediaTypeHeaderValue.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithDefaultContentNegotiator">
            <summary>
            Tests whether content result has the default content negotiator.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether content result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether content result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingDefaultFormatters">
            <summary>
            Tests whether created result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Content.IContentTestBuilder.ContainingMediaTypeFormatters(System.Action{MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether created result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.IAndCreatedTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the created response tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.IAndCreatedTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining created tests.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder">
            <summary>
            Used for testing created results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.WithDefaultContentNegotiator">
            <summary>
            Tests whether created result has the default content negotiator.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether created result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether created result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.AtLocation(System.String)">
            <summary>
            Tests whether created result has specific location provided by string.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.AtLocationPassing(System.Action{System.String})">
            <summary>
            Tests whether created result location passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the location.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.AtLocationPassing(System.Func{System.String,System.Boolean})">
            <summary>
            Tests whether created result location passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the location.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.AtLocation(System.Uri)">
            <summary>
            Tests whether created result has specific location provided by URI.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.AtLocation(System.Action{MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Tests whether created result has specific location provided by builder.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.At``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Tests whether created result returns created at specific action.
            </summary>
            <typeparam name="TController">Type of expected controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected action.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.At``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tests whether created result returns created at specific action.
            </summary>
            <typeparam name="TController">Type of expected controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected action.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingDefaultFormatters">
            <summary>
            Tests whether created result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Created.ICreatedTestBuilder.ContainingMediaTypeFormatters(System.Action{MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether created result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder">
            <summary>
            Used for testing specific bad request error messages.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder.ThatEquals(System.String)">
            <summary>
            Tests whether particular error message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular key.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder.BeginningWith(System.String)">
            <summary>
            Tests whether particular error message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder.EndingWith(System.String)">
            <summary>
            Tests whether particular error message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestErrorMessageTestBuilder.Containing(System.String)">
            <summary>
            Tests whether particular error message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder">
            <summary>
            Used for testing bad request results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithErrorMessage">
            <summary>
            Tests bad request result with specific error message using test builder.
            </summary>
            <returns>Bad request with error message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithErrorMessage(System.String)">
            <summary>
            Tests bad request result with specific error message provided by string.
            </summary>
            <param name="message">Expected error message from bad request result.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithErrorMessage(System.Action{System.String})">
            <summary>
            Tests bad request result error message whether it passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithErrorMessage(System.Func{System.String,System.Boolean})">
            <summary>
            Tests bad request result error message whether it passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithModelState(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Tests bad request result with specific model state dictionary.
            </summary>
            <param name="modelState">Model state dictionary to deeply compare to the actual one.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.BadRequest.IBadRequestTestBuilder.WithModelStateFor``1">
            <summary>
            Tests bad request result for model state errors using test builder.
            </summary>
            <typeparam name="TRequestModel">Type of model for which the model state errors will be tested.</typeparam>
            <returns>Model error test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.InternalServerError.IInternalServerErrorTestBuilder">
            <summary>
            Used for testing internal server error results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.InternalServerError.IInternalServerErrorTestBuilder.WithException">
            <summary>
            Tests internal server error whether it contains exception.
            </summary>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.InternalServerError.IInternalServerErrorTestBuilder.WithException(System.Exception)">
            <summary>
            Tests internal server error whether it contains exception with the same type and having the same message as the provided exception.
            </summary>
            <param name="exception">Expected exception.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IAndJsonSerializerSettingsTestBuilder">
            <summary>
            Used for testing JSON serializer settings in a JSON result with AndAlso() method.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IAndJsonSerializerSettingsTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining JSON serializer settings test builder.
            </summary>
            <returns>JSON serializer settings test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IAndJsonTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the JSON response tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IAndJsonTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining JSON result tests.
            </summary>
            <returns>JSON result test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder">
            <summary>
            Used for testing JSON serializer settings in a JSON result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithCulture(System.Globalization.CultureInfo)">
            <summary>
            Tests the Culture property in a JSON serializer settings object.
            </summary>
            <param name="culture">Expected Culture.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithContractResolver(Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Tests the ContractResolver property in a JSON serializer settings object.
            </summary>
            <param name="contractResolver">Expected ContractResolver.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithContractResolverOfType``1">
            <summary>
            Tests the ContractResolver property in a JSON serializer settings object by using generic type.
            </summary>
            <typeparam name="TContractResolver">Expected ContractResolver type.</typeparam>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithConstructorHandling(Newtonsoft.Json.ConstructorHandling)">
            <summary>
            Tests the ConstructorHandling property in a JSON serializer settings object.
            </summary>
            <param name="constructorHandling">Expected ConstructorHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithDateFormatHandling(Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Tests the DateFormatHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateFormatHandling">Expected DateFormatHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithDateParseHandling(Newtonsoft.Json.DateParseHandling)">
            <summary>
            Tests the DateParseHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateParseHandling">Expected DateParseHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithDateTimeZoneHandling(Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Tests the WithDateTimeZoneHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateTimeZoneHandling">Expected WithDateTimeZoneHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithDefaultValueHandling(Newtonsoft.Json.DefaultValueHandling)">
            <summary>
            Tests the DefaultValueHandling property in a JSON serializer settings object.
            </summary>
            <param name="defaultValueHandling">Expected DefaultValueHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithFormatting(Newtonsoft.Json.Formatting)">
            <summary>
            Tests the Formatting property in a JSON serializer settings object.
            </summary>
            <param name="formatting">Expected Formatting.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithMaxDepth(System.Nullable{System.Int32})">
            <summary>
            Tests the MaxDepth property in a JSON serializer settings object.
            </summary>
            <param name="maxDepth">Expected max depth.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithMissingMemberHandling(Newtonsoft.Json.MissingMemberHandling)">
            <summary>
            Tests the MissingMemberHandling property in a JSON serializer settings object.
            </summary>
            <param name="missingMemberHandling">Expected MissingMemberHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithNullValueHandling(Newtonsoft.Json.NullValueHandling)">
            <summary>
            Tests the NullValueHandling property in a JSON serializer settings object.
            </summary>
            <param name="nullValueHandling">Expected NullValueHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithObjectCreationHandling(Newtonsoft.Json.ObjectCreationHandling)">
            <summary>
            Tests the ObjectCreationHandling property in a JSON serializer settings object.
            </summary>
            <param name="objectCreationHandling">Expected ObjectCreationHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithPreserveReferencesHandling(Newtonsoft.Json.PreserveReferencesHandling)">
            <summary>
            Tests the PreserveReferencesHandling property in a JSON serializer settings object.
            </summary>
            <param name="preserveReferencesHandling">Expected PreserveReferencesHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithReferenceLoopHandling(Newtonsoft.Json.ReferenceLoopHandling)">
            <summary>
            Tests the ReferenceLoopHandling property in a JSON serializer settings object.
            </summary>
            <param name="referenceLoopHandling">Expected ReferenceLoopHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithTypeNameAssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)">
            <summary>
            Tests the FormatterAssemblyStyle property in a JSON serializer settings object.
            </summary>
            <param name="typeNameAssemblyFormat">Expected FormatterAssemblyStyle.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder.WithTypeNameHandling(Newtonsoft.Json.TypeNameHandling)">
            <summary>
            Tests the TypeNameHandling property in a JSON serializer settings object.
            </summary>
            <param name="typeNameHandling">Expected TypeNameHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder">
            <summary>
            Used for testing JSON results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithDefaultEncoding">
            <summary>
            Tests whether JSON result has the default UTF8 encoding.
            </summary>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithEncoding(System.Text.Encoding)">
            <summary>
            Tests whether JSON result has the provided encoding.
            </summary>
            <param name="encoding">Expected encoding to test with.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithDefaulJsonSerializerSettings">
            <summary>
            Tests whether JSON result has the default JSON serializer settings.
            </summary>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Tests whether JSON result has the provided JSON serializer settings.
            </summary>
            <param name="jsonSerializerSettings">Expected JSON serializer settings to test with.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonTestBuilder.WithJsonSerializerSettings(System.Action{MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder})">
            <summary>
            Tests whether JSON result has JSON serializer settings by using builder.
            </summary>
            <param name="jsonSerializerSettingsBuilder">Builder for creating JSON serializer settings.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder">
            <summary>
            Used for testing redirect results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.AtLocation(System.String)">
            <summary>
            Tests whether redirect result has specific location provided by string.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.AtLocationPassing(System.Action{System.String})">
            <summary>
            Tests whether redirect result location passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the location.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.AtLocationPassing(System.Func{System.String,System.Boolean})">
            <summary>
            Tests whether redirect result location passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the location.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.AtLocation(System.Uri)">
            <summary>
            Tests whether redirect result has specific location provided by URI.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.AtLocation(System.Action{MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Tests whether redirect result has specific location provided by builder.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.To``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Tests whether redirect result redirects to specific action.
            </summary>
            <typeparam name="TController">Type of expected redirect controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected redirect action.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Redirect.IRedirectTestBuilder.To``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tests whether redirect result redirects to specific action.
            </summary>
            <typeparam name="TController">Type of expected redirect controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected redirect action.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAndChallengesBuilder">
            <summary>
            Used for building collection of AuthenticationHeaderValue with AndAlso() method.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAndChallengesBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining header builders.
            </summary>
            <returns>The same challenge builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAndUnauthorizedTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the unauthorized response tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAndUnauthorizedTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining unauthorized result tests.
            </summary>
            <returns>Unauthorized result test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueParameterBuilder">
            <summary>
            Used for building mocked AuthenticationHeaderValue parameter.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueParameterBuilder.WithParameter(System.String)">
            <summary>
            Sets parameter to the built authentication header value with the provided string.
            </summary>
            <param name="parameter">Authentication header value parameter as string.</param>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder">
            <summary>
            Used for building mocked AuthenticationHeaderValue scheme.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder.WithScheme(MyTested.WebApi.AuthenticationScheme)">
            <summary>
            Sets scheme to the built authentication header value with the provided AuthenticationScheme enumeration.
            </summary>
            <param name="scheme">Enumeration with default authentication header schemes.</param>
            <returns>Authentication header value parameter builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder.WithScheme(System.String)">
            <summary>
            Sets scheme to the built authentication header value with the provided string.
            </summary>
            <param name="scheme">Authentication header scheme as string.</param>
            <returns>Authentication header value parameter builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IChallengesBuilder">
            <summary>
            Used for building collection of AuthenticationHeaderValue.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IChallengesBuilder.ContainingHeader(System.Action{MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder})">
            <summary>
            Adds built header to the collection of authentication header values.
            </summary>
            <param name="authenticationHeaderValueBuilder">Action providing authentication header value builder.</param>
            <returns>The same challenge builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder">
            <summary>
            Used for testing the authenticated header challenges in unauthorized results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(MyTested.WebApi.AuthenticationScheme)">
            <summary>
            Tests whether an unauthorized result contains authenticated header with the provided default scheme.
            </summary>
            <param name="scheme">Enumeration containing default schemes.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.String)">
            <summary>
            Tests whether an unauthorized result contains authenticated header with the provided scheme as string.
            </summary>
            <param name="scheme">Scheme as string.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.String,System.String)">
            <summary>
            Tests whether an unauthorized result contains authenticated header with the provided scheme and parameter.
            </summary>
            <param name="scheme">Scheme as string.</param>
            <param name="parameter">Parameter as string.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Tests whether an unauthorized result contains authenticated header with the provided authenticated header value.
            </summary>
            <param name="challenge">AuthenticationHeaderValue containing scheme and parameter.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.Action{MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder})">
            <summary>
            Tests whether an unauthorized result contains authenticated header using the provided authenticated header value builder.
            </summary>
            <param name="challengeBuilder">Builder for creating AuthenticationHeaderValue.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <summary>
            Tests whether an unauthorized result has exactly the same authenticated header values as the provided collection.
            </summary>
            <param name="challenges">Collection of authenticated header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <summary>
            Tests whether an unauthorized result has exactly the same authenticated header values as the provided ones as parameters.
            </summary>
            <param name="challenges">Parameters of authenticated header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IUnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Action{MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IChallengesBuilder})">
            <summary>
            Tests whether an unauthorized result has exactly the same authentication header values as the provided ones from the challenges builder.
            </summary>
            <param name="challengesBuilder">Builder for creating collection of authentication header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpRequests.IAndHttpRequestMessageBuilder">
            <summary>
            Used for adding AndAlso() method to the the HTTP request message builder.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IAndHttpRequestMessageBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when building HTTP request message.
            </summary>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder">
            <summary>
            Used for building HTTP request message.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithContent(System.Net.Http.HttpContent)">
            <summary>
            Adds HTTP content to the built HTTP request message.
            </summary>
            <param name="content">HTTP content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStreamContent(System.IO.Stream)">
            <summary>
            Adds HTTP stream content to the built HTTP request message.
            </summary>
            <param name="stream">HTTP stream content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStreamContent(System.IO.Stream,System.Int32)">
            <summary>
            Adds HTTP stream content to the built HTTP request message.
            </summary>
            <param name="stream">HTTP stream content to add.</param>
            <param name="bufferSize">Buffer size of the added HTTP stream content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithByteArrayContent(System.Byte[])">
            <summary>
            Adds HTTP byte array content to the built HTTP request message.
            </summary>
            <param name="bytes">HTTP byte array content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithByteArrayContent(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds HTTP byte array content to the built HTTP request message.
            </summary>
            <param name="bytes">HTTP byte array content to add.</param>
            <param name="offset">Offset in the HTTP byte array content.</param>
            <param name="count">The number of bytes in the HTTP byte array content to use.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithFormUrlEncodedContent(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds HTTP form URL encoded content to the built HTTP request message.
            </summary>
            <param name="nameValueCollection">Name value pairs collection.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithFormUrlEncodedContent(System.String)">
            <summary>
            Adds HTTP form URL encoded content to the built HTTP request message.
            </summary>
            <param name="queryString">String representing the content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithJsonContent(System.String)">
            <summary>
            Adds JSON content to the built HTTP request message.
            </summary>
            <param name="jsonContent">JSON string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStringContent(System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStringContent(System.String,System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="mediaType">Type of media to use in the content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStringContent(System.String,System.Text.Encoding)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="encoding">Encoding used in the string content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithStringContent(System.String,System.Text.Encoding,System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="encoding">Encoding used in the string content.</param>
            <param name="mediaType">Type of media to use in the content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithHeader(System.String,System.String)">
            <summary>
            Adds header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of headers to the built HTTP request message.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithContentHeader(System.String,System.String)">
            <summary>
            Adds content header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithContentHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds content header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithContentHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of content headers to the built HTTP request message.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithMethod(System.String)">
            <summary>
            Adds method to the built HTTP request message.
            </summary>
            <param name="method">HTTP method represented by string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Adds method to the built HTTP request message.
            </summary>
            <param name="method">HTTP method represented by HttpMethod type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithRequestUri(System.String)">
            <summary>
            Adds request location to the built HTTP request message.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithRequestUri(System.Uri)">
            <summary>
            Adds request location to the built HTTP request message.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithRequestUri(System.Action{MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Adds request location provided by a builder to the HTTP request message.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithVersion(System.String)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="version">HTTP version provided by string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="major">Major number in the provided version.</param>
            <param name="minor">Minor number in the provided version.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder.WithVersion(System.Version)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="version">HTTP version provided by Version type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.IHttpConfigurationBuilder">
            <summary>
            HTTP configuration builder.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.IHttpConfigurationBuilder.AndStartsServer">
            <summary>
            Starts HTTP server with the provided configuration.
            </summary>
            <returns>Server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.IHttpConfigurationBuilder.WithErrorDetailPolicy(System.Web.Http.IncludeErrorDetailPolicy)">
            <summary>
            Sets the error detail policy used in the testing. Default is 'Always'.
            </summary>
            <param name="errorDetailPolicy">Error details policy to use.</param>
            <returns>The same HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.IHttpConfigurationBuilder.WithDependencyResolver(System.Web.Http.Dependencies.IDependencyResolver)">
            <summary>
            Sets the dependency resolver used in the testing.
            </summary>
            <param name="dependencyResolver">IDependencyResolver instance to use for all tests.</param>
            <returns>The same HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.IHttpConfigurationBuilder.WithDependencyResolver(System.Func{System.Web.Http.Dependencies.IDependencyResolver})">
            <summary>
            Sets the dependency resolver used in the testing by using construction function.
            </summary>
            <param name="construction">Construction function returning the dependency resolver.</param>
            <returns>The same HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.IHttpConfigurationBuilder.WithBaseAddress(System.String)">
            <summary>
            Sets the global base address to be used across the test cases. Default is local host.
            </summary>
            <param name="baseAddress">Base address to use.</param>
            <returns>The same HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.IHttpConfigurationBuilder.WithInlineConstraintResolver(System.Web.Http.Routing.IInlineConstraintResolver)">
            <summary>
            Sets custom inline constraint resolver to http configuration
            </summary>
            <param name="inlineConstraintResolver">Custom route constraint resolver to use.</param>
            <returns>New HTTP configuration builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Models.IHttpHandlerModelDetailsTestBuilder`1">
            <summary>
            Used for testing the response model members.
            </summary>
            <typeparam name="TResponseModel">Response model from HTTP response message content.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IHttpHandlerModelDetailsTestBuilder`1.Passing(System.Action{`0})">
            <summary>
            Tests whether the returned response model from the tested handler passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the response model.</param>
            <returns>Builder for testing the HTTP response message results from handlers.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IHttpHandlerModelDetailsTestBuilder`1.Passing(System.Func{`0,System.Boolean})">
            <summary>
            Tests whether the returned response model from the tested handler passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the response model.</param>
            <returns>Builder for testing the HTTP response message results from handlers.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IHttpHandlerModelDetailsTestBuilder`1.AndProvideTheModel">
            <summary>
            Gets the HTTP response message content model used in the testing.
            </summary>
            <returns>Instance of the content model type.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Models.IAndModelErrorTestBuilder`1">
            <summary>
            Used for adding AndAlso() method to the the model error tests.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IAndModelErrorTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining error message tests.
            </summary>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Models.IBaseResponseModelTestBuilder">
            <summary>
            Base interface for all response model test builders.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IBaseResponseModelTestBuilder.WithResponseModelOfType``1">
            <summary>
            Tests whether response model is returned from the invoked action.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IBaseResponseModelTestBuilder.WithResponseModel``1(``0)">
            <summary>
            Tests whether a deeply equal object to the provided one is returned from the invoked action.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1">
            <summary>
            Used for testing specific model errors.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.ThatEquals(System.String)">
            <summary>
            Tests whether particular error message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular key.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.BeginningWith(System.String)">
            <summary>
            Tests whether particular error message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.EndingWith(System.String)">
            <summary>
            Tests whether particular error message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.Containing(System.String)">
            <summary>
            Tests whether particular error message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.ContainingModelStateError(System.String)">
            <summary>
            Tests whether tested action's model state contains error by key.
            </summary>
            <param name="errorKey">Error key to search for.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.ContainingModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for errors.</typeparam>
            <param name="memberWithError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.ContainingNoModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains no error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for no errors.</typeparam>
            <param name="memberWithNoError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorDetailsTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining error message tests.
            </summary>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Models.IModelErrorTestBuilder">
            <summary>
            Used for testing model errors.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorTestBuilder.ContainingNoModelStateErrors">
            <summary>
            Tests whether tested action's model state is valid.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Models.IModelErrorTestBuilder`1">
            <summary>
            Used for testing model errors.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorTestBuilder`1.ContainingModelStateError(System.String)">
            <summary>
            Tests whether tested action's model state contains error by key.
            </summary>
            <param name="errorKey">Error key to search for.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorTestBuilder`1.ContainingModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for errors.</typeparam>
            <param name="memberWithError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelErrorTestBuilder`1.ContainingNoModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains no error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for no errors.</typeparam>
            <param name="memberWithNoError">Member expression for the tested member.</param>
            <returns>This instance in order to support method chaining.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Models.IModelDetailsTestBuilder`1">
            <summary>
            Used for testing the response model members.
            </summary>
            <typeparam name="TResponseModel">Response model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelDetailsTestBuilder`1.Passing(System.Action{`0})">
            <summary>
            Tests whether the returned response model from the invoked action passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the response model.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Models.IModelDetailsTestBuilder`1.Passing(System.Func{`0,System.Boolean})">
            <summary>
            Tests whether the returned response model from the invoked action passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the response model.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Routes.IAndResolvedRouteTestBuilder">
            <summary>
            Used for adding AndAlso() method to the route test builder.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IAndResolvedRouteTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when building route tests.
            </summary>
            <returns>The same route builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Routes.IAndShouldMapTestBuilder">
            <summary>
            Used for adding And() method to the route request builder.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IAndShouldMapTestBuilder.And">
            <summary>
            And method for better readability when building route HTTP request message.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Routes.IResolvedRouteTestBuilder">
            <summary>
            Used for adding additional test cases to a route.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IResolvedRouteTestBuilder.ToHandlerOfType``1">
            <summary>
            Tests whether the resolved route will be handled by a HttpMessageHandler of the provided type.
            </summary>
            <typeparam name="THandler">Type of HttpMessageHandler.</typeparam>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IResolvedRouteTestBuilder.ToNoHandlerOfType``1">
            <summary>
            Tests whether the resolved route will not be handled by a HttpMessageHandler of the provided type.
            </summary>
            <typeparam name="THandler">Type of HttpMessageHandler.</typeparam>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IResolvedRouteTestBuilder.ToNoHandler">
            <summary>
            Tests whether the resolved route will not be handled by any HttpMessageHandler.
            </summary>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IResolvedRouteTestBuilder.ToValidModelState">
            <summary>
            Tests whether the resolved route will have valid model state.
            </summary>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IResolvedRouteTestBuilder.ToInvalidModelState(System.Nullable{System.Int32})">
            <summary>
            Tests whether the resolved route will have invalid model state.
            </summary>
            <param name="withNumberOfErrors">Expected number of errors. If default null is provided, the test builder checks only if any errors are found.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder">
            <summary>
            Used for building and testing a route.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithHttpMethod(System.String)">
            <summary>
            Adds HTTP method to the built route test.
            </summary>
            <param name="httpMethod">HTTP method represented by string.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithHttpMethod(System.Net.Http.HttpMethod)">
            <summary>
            Adds HTTP method to the built route test.
            </summary>
            <param name="httpMethod">HTTP method represented by HttpMethod.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithRequestHeader(System.String,System.String)">
            <summary>
            Add HTTP header to the built route test. 
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithRequestHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add HTTP header to the built route test. 
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithRequestHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of HTTP headers to the built route test.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithContentHeader(System.String,System.String)">
            <summary>
            Add HTTP content header to the built route test. 
            </summary>
            <param name="name">Name of the content header.</param>
            <param name="value">Value of the content header.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithContentHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add HTTP content header to the built route test. 
            </summary>
            <param name="name">Name of the content header.</param>
            <param name="values">Collection of values for the content header.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithContentHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of HTTP content headers to the built route test.
            </summary>
            <param name="headers">Dictionary of content headers to add.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithFormUrlEncodedContent(System.String)">
            <summary>
            Adds URL encoded content to the built route test.
            </summary>
            <param name="content">URL encoded content represented by string.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithJsonContent(System.String)">
            <summary>
            Adds JSON content to the built route test.
            </summary>
            <param name="content">JSON content represented by string.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithContent(System.String,System.String)">
            <summary>
            Adds content to the built route test.
            </summary>
            <param name="content">Content represented by string.</param>
            <param name="mediaType">Media type of the content represented by string.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.WithContent(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Adds content to the built route test.
            </summary>
            <param name="content">Content represented by string.</param>
            <param name="mediaType">Media type of the content represented by MediaTypeHeaderValue.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.ToAction(System.String)">
            <summary>
            Tests whether the built route is resolved to the provided action.
            </summary>
            <param name="action">Expected action name.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.ToController(System.String)">
            <summary>
            Tests whether the built route is resolved to the provided controller name.
            </summary>
            <param name="controller">Expected controller name.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.To``1">
            <summary>
            Tests whether the built route is resolved to the provided controller type.
            </summary>
            <typeparam name="TController">Expected controller type.</typeparam>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.To``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Tests whether the built route is resolved to the action provided by the expression.
            </summary>
            <typeparam name="TController">Type of expected resolved controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected resolved action.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.To``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tests whether the built route is resolved to the action provided by the expression.
            </summary>
            <typeparam name="TController">Type of expected resolved controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected resolved action.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.ToNotAllowedMethod">
            <summary>
            Tests whether the built route cannot be resolved because of not allowed method.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.ToNonExistingRoute">
            <summary>
            Tests whether the built route cannot be resolved.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Routes.IShouldMapTestBuilder.ToIgnoredRoute">
            <summary>
            Tests whether the built route is ignored by StopRoutingHandler.
            </summary>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Servers.IServer">
            <summary>
            Provides options to start and stop HTTP servers, as well as processing HTTP requests for full pipeline testing.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.Starts(System.Web.Http.HttpConfiguration)">
            <summary>
            Starts new global HTTP server.
            </summary>
            <param name="httpConfiguration">Optional HTTP configuration to use. If no configuration is provided, the global configuration will be used instead.</param>
            <returns>Server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.Starts``1(System.Int32,System.String)">
            <summary>
            Starts new global OWIN server.
            </summary>
            <typeparam name="TStartup">OWIN startup class to use.</typeparam>
            <param name="port">Network port on which the server will listen for requests.</param>
            <param name="host">Network host on which the server will listen for requests.</param>
            <returns>Server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.IsLocatedAt(System.String)">
            <summary>
            Configures global remote server.
            </summary>
            <param name="baseAddress">Base address to use for the requests.</param>
            <returns>Server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.Stops">
            <summary>
            Stops all currently started global HTTP or OWIN servers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.Working">
            <summary>
            Processes HTTP requests on globally started HTTP or OWIN servers. If global OWIN server is started, it will be used. If not the method will check for global HTTP server to use. If such is not found, a new instance of HTTP server is created with the global HTTP configuration.
            </summary>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.Working(System.Web.Http.HttpConfiguration)">
            <summary>
            Starts new HTTP server to process a request.
            </summary>
            <param name="httpConfiguration">HTTP configuration to use in the testing.</param>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.Working``1(System.Int32,System.String)">
            <summary>
            Starts new OWIN server to process a request.
            </summary>
            <typeparam name="TStartup">OWIN startup class to use.</typeparam>
            <param name="port">Network port on which the server will listen for requests.</param>
            <param name="host">Network host on which the server will listen for requests.</param>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.WorkingRemotely">
            <summary>
            Processes HTTP request on globally configured remote HTTP server.
            </summary>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServer.WorkingRemotely(System.String)">
            <summary>
            Processes HTTP request on the remote HTTP server located at the provided base address.
            </summary>
            <param name="baseAddress">Base address to use for the requests.</param>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Servers.IServerTestBuilder">
            <summary>
            Provides options to test the HTTP response from a server.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Servers.IServerTestBuilder.ShouldReturnHttpResponseMessage">
            <summary>
            Tests for a particular HTTP response message.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Formatters.IAndFormattersBuilder">
            <summary>
            Used for adding AndAlso() method to the the formatter tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Formatters.IAndFormattersBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining formatters tests.
            </summary>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder">
            <summary>
            Used for testing media type formatters in a created result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Instance of MediaTypeFormatter.</param>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Instance of MediaTypeFormatter.</typeparam>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Uris.IAndUriTestBuilder">
            <summary>
            Used for adding AndAlso() method to the the URI tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Uris.IAndUriTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining URI tests.
            </summary>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder">
            <summary>
            Used for testing URI location in a created result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder.WithHost(System.String)">
            <summary>
            Tests whether the URI has the same host as the provided one.
            </summary>
            <param name="host">Host part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder.WithPort(System.Int32)">
            <summary>
            Tests whether the URI has the same port as the provided one.
            </summary>
            <param name="port">Port part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder.WithAbsolutePath(System.String)">
            <summary>
            Tests whether the URI has the same absolute path as the provided one.
            </summary>
            <param name="absolutePath">Absolute path part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder.WithScheme(System.String)">
            <summary>
            Tests whether the URI has the same scheme as the provided one.
            </summary>
            <param name="scheme">Scheme part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder.WithQuery(System.String)">
            <summary>
            Tests whether the URI has the same query as the provided one.
            </summary>
            <param name="query">Query part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder.WithFragment(System.String)">
            <summary>
            Tests whether the URI has the same fragment as the provided one.
            </summary>
            <param name="fragment">Document fragment part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.NoActionAttributes">
            <summary>
            Checks whether the tested action has no attributes of any type. 
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.ActionAttributes(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested action has at least 1 attribute of any type. 
            </summary>
            <param name="withTotalNumberOf">Optional parameter specifying the exact total number of attributes on the tested action.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.ActionAttributes(System.Action{MyTested.WebApi.Builders.Contracts.Attributes.IActionAttributesTestBuilder})">
            <summary>
            Checks whether the tested action has at specific attributes. 
            </summary>
            <param name="attributesTestBuilder">Builder for testing specific attributes on the action.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.ModelStateFor``1">
            <summary>
            Provides way to continue test case with specific model state errors.
            </summary>
            <typeparam name="TRequestModel">Request model type to be tested for errors.</typeparam>
            <returns>Model test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.ValidModelState">
            <summary>
            Checks whether the tested action's provided model state is valid.
            </summary>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldHaveTestBuilder`1.InvalidModelState(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested action's provided model state is not valid.
            </summary>
            <param name="withNumberOfErrors">Expected number of errors. If default null is provided, the test builder checks only if any errors are found.</param>
            <returns>Test builder with AndAlso method.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1">
            <summary>
            Used for testing action returned result.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.DefaultValue">
            <summary>
            Tests whether action result is the default value of the type.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Null">
            <summary>
            Tests whether action result is null.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.NotNull">
            <summary>
            Tests whether action result is not null.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.HttpResponseMessage">
            <summary>
            Tests whether action result is HttpResponseMessage.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Ok">
            <summary>
            Tests whether action result is OkResult or OkNegotiatedContentResult{T}.
            </summary>
            <returns>Ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Created">
            <summary>
            Tests whether action result is CreatedNegotiatedContentResult{T} or CreatedAtRouteNegotiatedContentResult{T}.
            </summary>
            <returns>Created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Content">
            <summary>
            Tests whether action result is NegotiatedContentResult{T} or FormattedContentResult{T}.
            </summary>
            <returns>Content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Redirect">
            <summary>
            Tests whether action result is RedirectResult or RedirectToRouteResult.
            </summary>
            <returns>Redirect test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.StatusCode">
            <summary>
            Tests whether action result is StatusCodeResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.StatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether action result is StatusCodeResult and is the same as provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.NotFound">
            <summary>
            Tests whether action result is NotFoundResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.BadRequest">
            <summary>
            Tests whether action result is BadRequestResult, InvalidModelStateResult or BadRequestErrorMessageResult.
            </summary>
            <returns>Bad request test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Conflict">
            <summary>
            Tests whether action result is ConflictResult.
            </summary>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Unauthorized">
            <summary>
            Tests whether action result is UnauthorizedResult.
            </summary>
            <returns>Unauthorized result test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.InternalServerError">
            <summary>
            Tests whether action result is InternalServerErrorResult or ExceptionResult.
            </summary>
            <returns>Internal server error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.Json">
            <summary>
            Tests whether action result is JSON Result.
            </summary>
            <returns>JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.ResultOfType``1">
            <summary>
            Tests whether action result is of the provided generic type.
            </summary>
            <typeparam name="TResponseModel">Expected response type.</typeparam>
            <returns>Response model details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldReturnTestBuilder`1.ResultOfType(System.Type)">
            <summary>
            Tests whether action result is of the provided type.
            </summary>
            <param name="returnType">Expected return type.</param>
            <returns>Response model details test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Actions.IShouldThrowTestBuilder">
            <summary>
            Used for testing whether action throws exception.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldThrowTestBuilder.Exception">
            <summary>
            Tests whether action throws any exception.
            </summary>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldThrowTestBuilder.AggregateException(System.Nullable{System.Int32})">
            <summary>
            Tests whether action throws any AggregateException.
            </summary>
            <param name="withNumberOfInnerExceptions">Optional expected number of total inner exceptions.</param>
            <returns>AggregateException test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IShouldThrowTestBuilder.HttpResponseException">
            <summary>
            Tests whether action throws any HttpResponseException.
            </summary>
            <returns>HttpResponseException test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Actions.IVoidActionResultTestBuilder">
            <summary>
            Used for testing void actions.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IVoidActionResultTestBuilder.ShouldReturnEmpty">
            <summary>
            Tests whether action result is void.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IVoidActionResultTestBuilder.ShouldHave">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <returns>Should have test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IVoidActionResultTestBuilder.ShouldThrow">
            <summary>
            Used for testing whether action throws exception.
            </summary>
            <returns>Should throw test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.Actions.IActionResultTestBuilder`1">
            <summary>
            Used for building the action result which will be tested.
            </summary>
            <typeparam name="TActionResult">Type of action result to be tested.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IActionResultTestBuilder`1.ShouldHave">
            <summary>
            Used for testing action attributes and model state.
            </summary>
            <returns>Should have test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IActionResultTestBuilder`1.ShouldThrow">
            <summary>
            Used for testing whether action throws exception.
            </summary>
            <returns>Should throw test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.Actions.IActionResultTestBuilder`1.ShouldReturn">
            <summary>
            Used for testing returned action result.
            </summary>
            <returns>Should return test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Contracts.And.IAndTestBuilder`1">
            <summary>
            Class containing AndAlso() method allowing additional assertions after model state tests.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Contracts.And.IAndTestBuilder`1.AndAlso">
            <summary>
            Method allowing additional assertions after the model state tests.
            </summary>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageWithTimeTestBuilder">
            <summary>
            Used for testing HTTP response message with response time measurements.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageWithTimeTestBuilder.#ctor(System.Net.Http.HttpMessageHandler,System.Net.Http.HttpResponseMessage,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageWithTimeTestBuilder" /> class.
            </summary>
            <param name="handler">Tested HTTP message handler.</param>
            <param name="httpResponseMessage">HTTP response result from the tested handler.</param>
            <param name="responseTime">Measured response time from the tested handler.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageWithTimeTestBuilder.WithResponseTime(System.Action{System.TimeSpan})">
            <summary>
            Tests whether the measured response time passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the measured response time.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageWithTimeTestBuilder.WithResponseTime(System.Func{System.TimeSpan,System.Boolean})">
            <summary>
            Tests whether the measured response time passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the measured response time.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageWithTimeTestBuilder.AndProvideTheResponseTime">
            <summary>
            Gets the response time measured in the testing.
            </summary>
            <returns>Instance of TimeSpan.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageWithTimeTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining HTTP response message with response time tests.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder">
            <summary>
            Used for testing HTTP response message results from handlers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.#ctor(System.Net.Http.HttpMessageHandler,System.Net.Http.HttpResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder" /> class.
            </summary>
            <param name="handler">Tested HTTP message handler.</param>
            <param name="httpResponseMessage">HTTP response result from the tested handler.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithResponseModelOfType``1">
            <summary>
            Tests whether certain type of response model is returned from the HTTP response message content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithResponseModel``1(``0)">
            <summary>
            Tests whether a deeply equal object to the provided one is returned from the invoked HTTP response message content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithContentOfType``1">
            <summary>
            Tests whether the content of the HTTP response message is of certain type.
            </summary>
            <typeparam name="TContentType">Type of expected HTTP content.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithStringContent(System.String)">
            <summary>
            Tests whether the content of the HTTP response message is the provided string.
            </summary>
            <param name="content">Expected string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithStringContent(System.Action{System.String})">
            <summary>
            Tests whether HTTP response message string content passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithStringContent(System.Func{System.String,System.Boolean})">
            <summary>
            Tests whether HTTP response message string content passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether the HTTP response message has the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithMediaTypeFormatterOfType``1">
            <summary>
            Tests whether the HTTP response message has the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithDefaultMediaTypeFormatter">
            <summary>
            Tests whether the HTTP response message contains the default media type formatter provided by the framework.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ContainingHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name.
            </summary>
            <param name="name">Name of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ContainingHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="value">Value of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ContainingHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="values">Collection of values in the expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ContainingHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains response headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing response headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ContainingContentHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains content header with certain name.
            </summary>
            <param name="name">Name of expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ContainingContentHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains content header with certain name and value.
            </summary>
            <param name="name">Name of expected content header.</param>
            <param name="value">Value of expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ContainingContentHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains content header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected content header.</param>
            <param name="values">Collection of values in the expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ContainingContentHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains content headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing content headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether HTTP response message status code is the same as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">Expected status code.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithVersion(System.String)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version as string.
            </summary>
            <param name="version">Expected version as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="major">Major number in the expected version.</param>
            <param name="minor">Minor number in the expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithVersion(System.Version)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="version">Expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithReasonPhrase(System.String)">
            <summary>
            Tests whether HTTP response message reason phrase is the same as the provided reason phrase as string.
            </summary>
            <param name="reasonPhrase">Expected reason phrase as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.WithSuccessStatusCode">
            <summary>
            Tests whether HTTP response message returns success status code between 200 and 299.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining HTTP response message tests.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.AndProvideTheHttpResponseMessage">
            <summary>
            Gets the HTTP response message used in the testing.
            </summary>
            <returns>Instance of HttpResponseMessage.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpHandlerResponseMessageTestBuilder.ThrowNewHttpResponseMessageAssertionException(System.String,System.String,System.String)">
            <summary>
            Throws HttpResponseMessageAssertionException with specific message.
            </summary>
            <param name="propertyName">Tested property name of the HTTP response message.</param>
            <param name="expectedValue">Expected value.</param>
            <param name="actualValue">Actual value.</param>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder">
            <summary>
            Used for testing HTTP message handlers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder" /> class.
            </summary>
            <param name="handler">HTTP handler which will be tested.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.WithInnerHandler``1">
            <summary>
            Sets inner HTTP handler to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.WithInnerHandler``1(``0)">
            <summary>
            Sets the provided instance as an inner HTTP handler to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="innerHandler">Instance of type HttpMessageHandler.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.WithInnerHandler``1(System.Func{``0})">
            <summary>
            Sets inner HTTP handler by using construction function to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="construction">Construction function returning the instantiated inner HttpMessageHandler.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.WithInnerHandler``1(System.Action{MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder})">
            <summary>
            Sets inner HTTP handler by using builder to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="httpMessageHandlerBuilder">Inner HttpMessageHandler builder.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.WithHttpConfiguration(System.Web.Http.HttpConfiguration)">
            <summary>
            Sets the HTTP configuration for the current test case.
            </summary>
            <param name="config">Instance of HttpConfiguration.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.WithHttpRequestMessage(System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds HTTP request message to the tested handler.
            </summary>
            <param name="requestMessage">Instance of HttpRequestMessage.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.WithHttpRequestMessage(System.Action{MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Adds HTTP request message to the tested handler.
            </summary>
            <param name="httpRequestMessageBuilder">Builder for HTTP request message.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.ShouldReturnHttpResponseMessage">
            <summary>
            Tests the HTTP handler for returning HTTP response message successfully.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.AndProvideTheHttpRequestMessage">
            <summary>
            Gets the HTTP request message used in the handler testing.
            </summary>
            <returns>Instance of HttpRequestMessage.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpMessageHandlerTestBuilder.AndProvideTheHttpConfiguration">
            <summary>
            Gets the HTTP configuration used in the handler testing.
            </summary>
            <returns>Instance of HttpConfiguration.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder">
            <summary>
            Used for building HTTP request message.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder" /> class.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithContent(System.Net.Http.HttpContent)">
            <summary>
            Adds HTTP content to the built HTTP request message.
            </summary>
            <param name="content">HTTP content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithStreamContent(System.IO.Stream)">
            <summary>
            Adds HTTP stream content to the built HTTP request message.
            </summary>
            <param name="stream">HTTP stream content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithStreamContent(System.IO.Stream,System.Int32)">
            <summary>
            Adds HTTP stream content to the built HTTP request message.
            </summary>
            <param name="stream">HTTP stream content to add.</param>
            <param name="bufferSize">Buffer size of the added HTTP stream content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithByteArrayContent(System.Byte[])">
            <summary>
            Adds HTTP byte array content to the built HTTP request message.
            </summary>
            <param name="bytes">HTTP byte array content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithByteArrayContent(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds HTTP byte array content to the built HTTP request message.
            </summary>
            <param name="bytes">HTTP byte array content to add.</param>
            <param name="offset">Offset in the HTTP byte array content.</param>
            <param name="count">The number of bytes in the HTTP byte array content to use.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithFormUrlEncodedContent(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds HTTP form URL encoded content to the built HTTP request message.
            </summary>
            <param name="nameValueCollection">Name value pairs collection.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithFormUrlEncodedContent(System.String)">
            <summary>
            Adds HTTP form URL encoded content to the built HTTP request message.
            </summary>
            <param name="queryString">String representing the content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithJsonContent(System.String)">
            <summary>
            Adds JSON content to the built HTTP request message.
            </summary>
            <param name="jsonContent">JSON string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithStringContent(System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithStringContent(System.String,System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="mediaType">Type of media to use in the content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithStringContent(System.String,System.Text.Encoding)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="encoding">Encoding used in the string content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithStringContent(System.String,System.Text.Encoding,System.String)">
            <summary>
            Adds HTTP string content to the built HTTP request message.
            </summary>
            <param name="content">String content to add.</param>
            <param name="encoding">Encoding used in the string content.</param>
            <param name="mediaType">Type of media to use in the content.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithHeader(System.String,System.String)">
            <summary>
            Adds header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of headers to the built HTTP request message.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithContentHeader(System.String,System.String)">
            <summary>
            Adds content header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithContentHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds content header to the built HTTP request message.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithContentHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of content headers to the built HTTP request message.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithMethod(System.String)">
            <summary>
            Adds method to the built HTTP request message.
            </summary>
            <param name="method">HTTP method represented by string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Adds method to the built HTTP request message.
            </summary>
            <param name="method">HTTP method represented by HttpMethod type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithRequestUri(System.String)">
            <summary>
            Adds request location to the built HTTP request message.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithRequestUri(System.Uri)">
            <summary>
            Adds request location to the built HTTP request message.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithRequestUri(System.Action{MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Adds request location provided by a builder to the HTTP request message.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithVersion(System.String)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="version">HTTP version provided by string.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="major">Major number in the provided version.</param>
            <param name="minor">Minor number in the provided version.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.WithVersion(System.Version)">
            <summary>
            Adds HTTP version to the built HTTP request message.
            </summary>
            <param name="version">HTTP version provided by Version type.</param>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpRequestMessageBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when building HTTP request message.
            </summary>
            <returns>The same HTTP request message builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder">
            <summary>
            Used for testing HTTP response message results from actions.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Net.Http.HttpResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">HTTP response result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithResponseModelOfType``1">
            <summary>
            Tests whether certain type of response model is returned from the HTTP response message object content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithResponseModel``1(``0)">
            <summary>
            Tests whether a deeply equal object to the provided one is returned from the invoked HTTP response message object content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithContentOfType``1">
            <summary>
            Tests whether the content of the HTTP response message is of certain type.
            </summary>
            <typeparam name="TContentType">Type of expected HTTP content.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithStringContent(System.String)">
            <summary>
            Tests whether the content of the HTTP response message is the provided string.
            </summary>
            <param name="content">Expected string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithStringContent(System.Action{System.String})">
            <summary>
            Tests whether HTTP response message string content passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithStringContent(System.Func{System.String,System.Boolean})">
            <summary>
            Tests whether HTTP response message string content passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the string content.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether the HTTP response message has the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithMediaTypeFormatterOfType``1">
            <summary>
            Tests whether the HTTP response message has the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithDefaultMediaTypeFormatter">
            <summary>
            Tests whether the HTTP response message contains the default media type formatter provided by the framework.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.ContainingHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name.
            </summary>
            <param name="name">Name of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.ContainingHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="value">Value of expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.ContainingHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected response header.</param>
            <param name="values">Collection of values in the expected response header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.ContainingHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains response headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing response headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.ContainingContentHeader(System.String)">
            <summary>
            Tests whether the HTTP response message contains content header with certain name.
            </summary>
            <param name="name">Name of expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.ContainingContentHeader(System.String,System.String)">
            <summary>
            Tests whether the HTTP response message contains content header with certain name and value.
            </summary>
            <param name="name">Name of expected content header.</param>
            <param name="value">Value of expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.ContainingContentHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests whether the HTTP response message contains content header with certain name and collection of value.
            </summary>
            <param name="name">Name of expected content header.</param>
            <param name="values">Collection of values in the expected content header.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.ContainingContentHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Tests whether the HTTP response message contains content headers provided by dictionary.
            </summary>
            <param name="headers">Dictionary containing content headers.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether HTTP response message status code is the same as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">Expected status code.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithVersion(System.String)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version as string.
            </summary>
            <param name="version">Expected version as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithVersion(System.Int32,System.Int32)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="major">Major number in the expected version.</param>
            <param name="minor">Minor number in the expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithVersion(System.Version)">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="version">Expected version.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithReasonPhrase(System.String)">
            <summary>
            Tests whether HTTP response message reason phrase is the same as the provided reason phrase as string.
            </summary>
            <param name="reasonPhrase">Expected reason phrase as string.</param>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.WithSuccessStatusCode">
            <summary>
            Tests whether HTTP response message returns success status code between 200 and 299.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining HTTP response message tests.
            </summary>
            <returns>The same HTTP response message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.HttpResponseMessageTestBuilder.AndProvideTheHttpResponseMessage">
            <summary>
            Gets the HTTP request message used in the testing.
            </summary>
            <returns>Instance of HttpRequestMessage.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpMessages.InnerHttpMessageHandlerBuilder">
            <summary>
            Used for adding inner HTTP message handlers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.InnerHttpMessageHandlerBuilder.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpMessages.InnerHttpMessageHandlerBuilder" /> class.
            </summary>
            <param name="handler">HTTP message handler on which the inner handler will be set.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.InnerHttpMessageHandlerBuilder.WithInnerHandler``1">
            <summary>
            Sets inner HTTP handler to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.InnerHttpMessageHandlerBuilder.WithInnerHandler``1(``0)">
            <summary>
            Sets the provided instance as an inner HTTP handler to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="innerHandler">Instance of type HttpMessageHandler.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.InnerHttpMessageHandlerBuilder.WithInnerHandler``1(System.Func{``0})">
            <summary>
            Sets inner HTTP handler by using construction function to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="construction">Construction function returning the instantiated inner HttpMessageHandler.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpMessages.InnerHttpMessageHandlerBuilder.WithInnerHandler``1(System.Action{MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder})">
            <summary>
            Sets inner HTTP handler by using builder to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="httpMessageHandlerBuilder">Inner HttpMessageHandler builder.</param>
        </member>
        <member name="T:MyTested.WebApi.Builders.Controllers.ControllerTestBuilder">
            <summary>
            Used for testing controllers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerTestBuilder.#ctor(System.Web.Http.ApiController,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Controllers.ControllerTestBuilder" /> class.
            </summary>
            <param name="controller">Controller which will be tested.</param>
            <param name="controllerAttributes">Collected attributes from the tested controller.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerTestBuilder.NoAttributes">
            <summary>
            Checks whether the tested controller has no attributes of any type. 
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerTestBuilder.Attributes(System.Nullable{System.Int32})">
            <summary>
            Checks whether the tested controller has at least 1 attribute of any type. 
            </summary>
            <param name="withTotalNumberOf">Optional parameter specifying the exact total number of attributes on the tested controller.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerTestBuilder.Attributes(System.Action{MyTested.WebApi.Builders.Contracts.Attributes.IControllerAttributesTestBuilder})">
            <summary>
            Checks whether the tested controller has at specific attributes. 
            </summary>
            <param name="attributesTestBuilder">Builder for testing specific attributes on the controller.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1">
            <summary>
            Used for building the action which will be tested.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1" /> class.
            </summary>
            <param name="controllerInstance">Instance of the tested ASP.NET Web API controller.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.Controller">
            <summary>
            Gets the ASP.NET Web API controller instance to be tested.
            </summary>
            <value>Instance of the ASP.NET Web API controller.</value>
        </member>
        <member name="P:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.HttpRequestMessage">
            <summary>
            Gets the HTTP request message used in the testing.
            </summary>
            <value>Instance of HttpRequestMessage.</value>
        </member>
        <member name="P:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.HttpConfiguration">
            <summary>
            Gets the HTTP configuration used in the testing.
            </summary>
            <value>Instance of HttpConfiguration.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithHttpConfiguration(System.Web.Http.HttpConfiguration)">
            <summary>
            Sets the HTTP configuration for the current test case.
            </summary>
            <param name="config">Instance of HttpConfiguration.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithHttpRequestMessage(System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds HTTP request message to the tested controller.
            </summary>
            <param name="requestMessage">Instance of HttpRequestMessage.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithHttpRequestMessage(System.Action{MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Adds HTTP request message to the tested controller.
            </summary>
            <param name="httpRequestMessageBuilder">Builder for HTTP request message.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithResolvedDependencyFor``1(``0)">
            <summary>
            Tries to resolve constructor dependency of given type.
            </summary>
            <typeparam name="TDependency">Type of dependency to resolve.</typeparam>
            <param name="dependency">Instance of dependency to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithResolvedDependencies(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Tries to resolve constructor dependencies by the provided collection of dependencies.
            </summary>
            <param name="dependencies">Collection of dependencies to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithResolvedDependencies(System.Object[])">
            <summary>
            Tries to resolve constructor dependencies by the provided dependencies.
            </summary>
            <param name="dependencies">Dependencies to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithoutValidation">
            <summary>
            Disables ModelState validation for the action call.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithAuthenticatedUser">
            <summary>
            Sets default authenticated user to the built controller with "TestUser" username.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithAuthenticatedUser(System.Security.Principal.IPrincipal)">
            <summary>
            Sets custom authenticated user to the built controller.
            </summary>
            <param name="pricipal">The IPrincipal user to set.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithAuthenticatedUser(System.Action{MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder})">
            <summary>
            Sets custom authenticated user using provided user builder.
            </summary>
            <param name="userBuilder">User builder to create mocked user object.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.WithSetup(System.Action{`0})">
            <summary>
            Sets custom properties to the controller using action delegate.
            </summary>
            <param name="controllerSetup">Action delegate to use for controller setup.</param>
            <returns>The same controller test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.ShouldHave">
            <summary>
            Used for testing controller attributes.
            </summary>
            <returns>Controller test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when building controller instance.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.Calling``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <typeparam name="TActionResult">Type of result from action.</typeparam>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.CallingAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <typeparam name="TActionResult">Asynchronous Task result from action.</typeparam>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.Calling(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing void actions.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.CallingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing void actions.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.AndProvideTheController">
            <summary>
            Gets ASP.NET Web API controller instance to be tested.
            </summary>
            <returns>Instance of the ASP.NET Web API controller.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.AndProvideTheHttpRequestMessage">
            <summary>
            Gets the HTTP configuration used in the testing.
            </summary>
            <returns>Instance of HttpConfiguration.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Controllers.ControllerBuilder`1.AndProvideTheHttpConfiguration">
            <summary>
            Gets the HTTP request message used in the testing.
            </summary>
            <returns>Instance of HttpRequestMessage.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder">
            <summary>
            Used for testing AggregateException.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.AggregateException)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Actual received aggregate exception.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder.ContainingInnerExceptionOfType``1">
            <summary>
            Tests whether AggregateException contains inner exception of the provided type.
            </summary>
            <typeparam name="TInnerException">Expected inner exception type.</typeparam>
            <returns>The same aggregate exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.AggregateExceptionTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining aggregate exception tests.
            </summary>
            <returns>The same aggregate exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder">
            <summary>
            Used for testing specific exception messages.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,MyTested.WebApi.Builders.Contracts.ExceptionErrors.IAndExceptionTestBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="exceptionTestBuilder">Original exception test builder.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.ThatEquals(System.String)">
            <summary>
            Tests whether particular exception message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular exception.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.BeginningWith(System.String)">
            <summary>
            Tests whether particular exception message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.EndingWith(System.String)">
            <summary>
            Tests whether particular exception message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionMessageTestBuilder.Containing(System.String)">
            <summary>
            Tests whether particular exception message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular exception message.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder">
            <summary>
            Used for testing expected exceptions.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="exception">Actual received exception.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder.OfType``1">
            <summary>
            Tests whether certain type of exception is returned from the invoked action.
            </summary>
            <typeparam name="TException">Type of the expected exception.</typeparam>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder.WithMessage">
            <summary>
            Tests exception message using test builder.
            </summary>
            <returns>Exception message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder.WithMessage(System.String)">
            <summary>
            Tests exception message whether it is equal to the provided message as string.
            </summary>
            <param name="message">Expected exception message as string.</param>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder.WithMessage(System.Action{System.String})">
            <summary>
            Tests exception message whether it passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on message.</param>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder.WithMessage(System.Func{System.String,System.Boolean})">
            <summary>
            Tests exception message whether it passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the message.</param>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.ExceptionTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining expected exception tests.
            </summary>
            <returns>The same exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder">
            <summary>
            Used for testing expected HttpResponseException.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Web.Http.HttpResponseException)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Actual received HttpResponseException.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether caught HttpResponseException has the same status code as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.ExceptionErrors.HttpResponseExceptionTestBuilder.WithHttpResponseMessage">
            <summary>
            Provides methods to test whether caught HttpResponseException has specific HttpResponseMessage.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder">
            <summary>
            Used for testing specific bad request error messages.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actualMessage">Actual error message received from bad request result.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.ThatEquals(System.String)">
            <summary>
            Tests whether particular error message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular key.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.BeginningWith(System.String)">
            <summary>
            Tests whether particular error message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.EndingWith(System.String)">
            <summary>
            Tests whether particular error message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestErrorMessageTestBuilder.Containing(System.String)">
            <summary>
            Tests whether particular error message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1">
            <summary>
            Used for testing bad request results.
            </summary>
            <typeparam name="TBadRequestResult">Type of bad request result - BadRequestResult, InvalidModelStateResult or BadRequestErrorMessageResult.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithErrorMessage">
            <summary>
            Tests bad request result with specific error message using test builder.
            </summary>
            <returns>Bad request with error message test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithErrorMessage(System.String)">
            <summary>
            Tests bad request result with specific error message provided by string.
            </summary>
            <param name="message">Expected error message from bad request result.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithErrorMessage(System.Action{System.String})">
            <summary>
            Tests bad request result error message whether it passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithErrorMessage(System.Func{System.String,System.Boolean})">
            <summary>
            Tests bad request result error message whether it passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the error message.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithModelState(System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Tests bad request result with specific model state dictionary.
            </summary>
            <param name="modelState">Model state dictionary to deeply compare to the actual one.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.BadRequest.BadRequestTestBuilder`1.WithModelStateFor``1">
            <summary>
            Tests bad request result for model state errors using test builder.
            </summary>
            <typeparam name="TRequestModel">Type of model for which the model state errors will be tested.</typeparam>
            <returns>Model error test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1">
            <summary>
            Used for testing content result.
            </summary>
            <typeparam name="TContentResult">Type of content result - NegotiatedContentResult{T} or FormattedContentResult{T}.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Tests whether content result has the same status code as the provided HttpStatusCode.
            </summary>
            <param name="statusCode">HttpStatusCode enumeration.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithMediaType(System.String)">
            <summary>
            Tests whether content result has the same content type as the provided string.
            </summary>
            <param name="mediaType">Media type as string.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithMediaType(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Tests whether content result has the same content type as the provided MediaTypeHeaderValue.
            </summary>
            <param name="mediaType">Media type as MediaTypeHeaderValue.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithDefaultContentNegotiator">
            <summary>
            Tests whether content result has the default content negotiator.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether content result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether content result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether content result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether content result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingDefaultFormatters">
            <summary>
            Tests whether content result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether content result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether content result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.ContainingMediaTypeFormatters(System.Action{MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether content result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same content test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Content.ContentTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining content tests.
            </summary>
            <returns>The same content test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1">
            <summary>
            Used for testing created results.
            </summary>
            <typeparam name="TCreatedResult">Type of created result - CreatedNegotiatedContentResult{T} or CreatedAtRouteNegotiatedContentResult{T}.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.WithDefaultContentNegotiator">
            <summary>
            Tests whether created result has the default content negotiator.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether created result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether created result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AtLocation(System.String)">
            <summary>
            Tests whether created result has specific location provided by string.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AtLocationPassing(System.Action{System.String})">
            <summary>
            Tests whether created result location passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the location.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AtLocationPassing(System.Func{System.String,System.Boolean})">
            <summary>
            Tests whether created result location passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the location.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AtLocation(System.Uri)">
            <summary>
            Tests whether created result has specific location provided by URI.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AtLocation(System.Action{MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Tests whether created result has specific location provided by builder.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.At``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Tests whether created result returns created at specific action.
            </summary>
            <typeparam name="TController">Type of expected controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected action.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.At``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tests whether created result returns created at specific action.
            </summary>
            <typeparam name="TController">Type of expected controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected action.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingDefaultFormatters">
            <summary>
            Tests whether created result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether created result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.ContainingMediaTypeFormatters(System.Action{MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether created result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same created test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Created.CreatedTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining created tests.
            </summary>
            <returns>The same created test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1">
            <summary>
            Used for testing internal server error results.
            </summary>
            <typeparam name="TInternalServerErrorResult">Type of internal server error result - InternalServerErrorResult or ExceptionResult.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1.WithException">
            <summary>
            Tests internal server error whether it contains exception.
            </summary>
            <returns>Exception test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.InternalServerError.InternalServerErrorTestBuilder`1.WithException(System.Exception)">
            <summary>
            Tests internal server error whether it contains exception with the same type and having the same message as the provided exception.
            </summary>
            <param name="exception">Expected exception.</param>
            <returns>Exception test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder">
            <summary>
            Used for testing JSON serializer settings in a JSON result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.#ctor(System.Web.Http.ApiController,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithCulture(System.Globalization.CultureInfo)">
            <summary>
            Tests the Culture property in a JSON serializer settings object.
            </summary>
            <param name="culture">Expected Culture.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithContractResolver(Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Tests the ContractResolver property in a JSON serializer settings object.
            </summary>
            <param name="contractResolver">Expected ContractResolver.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithContractResolverOfType``1">
            <summary>
            Tests the ContractResolver property in a JSON serializer settings object by using generic type.
            </summary>
            <typeparam name="TContractResolver">Expected ContractResolver type.</typeparam>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithConstructorHandling(Newtonsoft.Json.ConstructorHandling)">
            <summary>
            Tests the ConstructorHandling property in a JSON serializer settings object.
            </summary>
            <param name="constructorHandling">Expected ConstructorHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithDateFormatHandling(Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Tests the DateFormatHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateFormatHandling">Expected DateFormatHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithDateParseHandling(Newtonsoft.Json.DateParseHandling)">
            <summary>
            Tests the DateParseHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateParseHandling">Expected DateParseHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithDateTimeZoneHandling(Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Tests the WithDateTimeZoneHandling property in a JSON serializer settings object.
            </summary>
            <param name="dateTimeZoneHandling">Expected WithDateTimeZoneHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithDefaultValueHandling(Newtonsoft.Json.DefaultValueHandling)">
            <summary>
            Tests the DefaultValueHandling property in a JSON serializer settings object.
            </summary>
            <param name="defaultValueHandling">Expected DefaultValueHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithFormatting(Newtonsoft.Json.Formatting)">
            <summary>
            Tests the Formatting property in a JSON serializer settings object.
            </summary>
            <param name="formatting">Expected Formatting.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithMaxDepth(System.Nullable{System.Int32})">
            <summary>
            Tests the MaxDepth property in a JSON serializer settings object.
            </summary>
            <param name="maxDepth">Expected max depth.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithMissingMemberHandling(Newtonsoft.Json.MissingMemberHandling)">
            <summary>
            Tests the MissingMemberHandling property in a JSON serializer settings object.
            </summary>
            <param name="missingMemberHandling">Expected MissingMemberHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithNullValueHandling(Newtonsoft.Json.NullValueHandling)">
            <summary>
            Tests the NullValueHandling property in a JSON serializer settings object.
            </summary>
            <param name="nullValueHandling">Expected NullValueHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithObjectCreationHandling(Newtonsoft.Json.ObjectCreationHandling)">
            <summary>
            Tests the ObjectCreationHandling property in a JSON serializer settings object.
            </summary>
            <param name="objectCreationHandling">Expected ObjectCreationHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithPreserveReferencesHandling(Newtonsoft.Json.PreserveReferencesHandling)">
            <summary>
            Tests the PreserveReferencesHandling property in a JSON serializer settings object.
            </summary>
            <param name="preserveReferencesHandling">Expected PreserveReferencesHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithReferenceLoopHandling(Newtonsoft.Json.ReferenceLoopHandling)">
            <summary>
            Tests the ReferenceLoopHandling property in a JSON serializer settings object.
            </summary>
            <param name="referenceLoopHandling">Expected ReferenceLoopHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithTypeNameAssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)">
            <summary>
            Tests the FormatterAssemblyStyle property in a JSON serializer settings object.
            </summary>
            <param name="typeNameAssemblyFormat">Expected FormatterAssemblyStyle.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.WithTypeNameHandling(Newtonsoft.Json.TypeNameHandling)">
            <summary>
            Tests the TypeNameHandling property in a JSON serializer settings object.
            </summary>
            <param name="typeNameHandling">Expected TypeNameHandling.</param>
            <returns>The same JSON serializer settings test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonSerializerSettingsTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining JSON serializer settings test builder.
            </summary>
            <returns>JSON serializer settings test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1">
            <summary>
            Used for testing JSON results.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithDefaultEncoding">
            <summary>
            Tests whether JSON result has the default UTF8 encoding.
            </summary>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithEncoding(System.Text.Encoding)">
            <summary>
            Tests whether JSON result has the provided encoding.
            </summary>
            <param name="encoding">Expected encoding to test with.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithDefaulJsonSerializerSettings">
            <summary>
            Tests whether JSON result has the default JSON serializer settings.
            </summary>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Tests whether JSON result has the provided JSON serializer settings.
            </summary>
            <param name="jsonSerializerSettings">Expected JSON serializer settings to test with.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.WithJsonSerializerSettings(System.Action{MyTested.WebApi.Builders.Contracts.HttpActionResults.Json.IJsonSerializerSettingsTestBuilder})">
            <summary>
            Tests whether JSON result has JSON serializer settings by using builder.
            </summary>
            <param name="jsonSerializerSettingsBuilder">Builder for creating JSON serializer settings.</param>
            <returns>The same JSON test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Json.JsonTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining JSON result tests.
            </summary>
            <returns>JSON result test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1">
            <summary>
            Used for testing ok result.
            </summary>
            <typeparam name="TActionResult">Type of ok result - OkResult or OkNegotiatedContentResult{T}.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.WithNoResponseModel">
            <summary>
            Tests whether no response model is returned from the invoked action.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.WithDefaultContentNegotiator">
            <summary>
            Tests whether ok result has the default content negotiator.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.WithContentNegotiator(System.Net.Http.Formatting.IContentNegotiator)">
            <summary>
            Tests whether ok result has specific type of content negotiator.
            </summary>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.WithContentNegotiatorOfType``1">
            <summary>
            Tests whether ok result has specific type of content negotiator by using generic definition.
            </summary>
            <typeparam name="TContentNegotiator">Type of IContentNegotiator.</typeparam>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether ok result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Expected media type formatter.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether ok result contains the provided type of media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Type of MediaTypeFormatter.</typeparam>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingDefaultFormatters">
            <summary>
            Tests whether ok result contains the default media type formatters provided by the framework.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatters(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Tests whether ok result contains exactly the same types of media type formatters as the provided collection.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatters(System.Net.Http.Formatting.MediaTypeFormatter[])">
            <summary>
            Tests whether ok result contains exactly the same types of media type formatters as the provided parameters.
            </summary>
            <param name="mediaTypeFormatters">Expected collection of media type formatters provided as parameters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.ContainingMediaTypeFormatters(System.Action{MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder})">
            <summary>
            Tests whether ok result contains the media type formatters provided by builder.
            </summary>
            <param name="formattersBuilder">Builder for expected media type formatters.</param>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Ok.OkTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining ok tests.
            </summary>
            <returns>The same ok test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1">
            <summary>
            Used for testing redirect results.
            </summary>
            <typeparam name="TRedirectResult">Type of redirect result - RedirectResult or RedirectToRouteResult.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.AtLocation(System.String)">
            <summary>
            Tests whether redirect result has specific location provided by string.
            </summary>
            <param name="location">Expected location as string.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.AtLocationPassing(System.Action{System.String})">
            <summary>
            Tests whether redirect result location passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the location.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.AtLocationPassing(System.Func{System.String,System.Boolean})">
            <summary>
            Tests whether redirect result location passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the location.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.AtLocation(System.Uri)">
            <summary>
            Tests whether redirect result has specific location provided by URI.
            </summary>
            <param name="location">Expected location as URI.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.AtLocation(System.Action{MyTested.WebApi.Builders.Contracts.Uris.IUriTestBuilder})">
            <summary>
            Tests whether redirect result has specific location provided by builder.
            </summary>
            <param name="uriTestBuilder">Builder for expected URI.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.To``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Tests whether redirect result redirects to specific action.
            </summary>
            <typeparam name="TController">Type of expected redirect controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected redirect action.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Redirect.RedirectTestBuilder`1.To``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tests whether redirect result redirects to specific action.
            </summary>
            <typeparam name="TController">Type of expected redirect controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected redirect action.</param>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder">
            <summary>
            Used for building mocked AuthenticationHeaderValue.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder" /> class.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder.WithScheme(MyTested.WebApi.AuthenticationScheme)">
            <summary>
            Sets scheme to the built authentication header value with the provided AuthenticationScheme enumeration.
            </summary>
            <param name="scheme">Enumeration with default authentication header schemes.</param>
            <returns>Authentication header value parameter builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder.WithScheme(System.String)">
            <summary>
            Sets scheme to the built authentication header value with the provided string.
            </summary>
            <param name="scheme">Authentication header value scheme as string.</param>
            <returns>Authentication header value parameter builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.AuthenticationHeaderValueBuilder.WithParameter(System.String)">
            <summary>
            Sets parameter to the built authentication header value with the provided string.
            </summary>
            <param name="parameter">Authentication header value parameter as string.</param>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder">
            <summary>
            Used for building collection of AuthenticationHeaderValue.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder" /> class.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder.ContainingHeader(System.Action{MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder})">
            <summary>
            Adds built header to the collection of authentication header values.
            </summary>
            <param name="authenticationHeaderValueBuilder">Action providing authentication header value builder.</param>
            <returns>The same challenge builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.ChallengesBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining header builders.
            </summary>
            <returns>The same challenge builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder">
            <summary>
            Used for testing the authentication header challenges in unauthorized results.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Web.Http.Results.UnauthorizedResult)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(MyTested.WebApi.AuthenticationScheme)">
            <summary>
            Tests whether an unauthorized result contains authentication header with the provided default scheme.
            </summary>
            <param name="scheme">Enumeration containing default schemes.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.String)">
            <summary>
            Tests whether an unauthorized result contains authentication header with the provided scheme as string.
            </summary>
            <param name="scheme">Scheme as string.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.String,System.String)">
            <summary>
            Tests whether an unauthorized result contains authentication header with the provided scheme and parameter.
            </summary>
            <param name="scheme">Scheme as string.</param>
            <param name="parameter">Parameter as string.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Tests whether an unauthorized result contains authentication header with the provided authenticated header value.
            </summary>
            <param name="challenge">AuthenticationHeaderValue containing scheme and parameter.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.ContainingAuthenticationHeaderChallenge(System.Action{MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IAuthenticationHeaderValueBuilder})">
            <summary>
            Tests whether an unauthorized result contains authenticated header using the provided authenticated header value builder.
            </summary>
            <param name="challengeBuilder">Builder for creating AuthenticationHeaderValue.</param>
            <returns>Unauthorized result test builder with AndAlso() method.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
            <summary>
            Tests whether an unauthorized result has exactly the same authentication header values as the provided collection.
            </summary>
            <param name="challenges">Collection of authentication header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Net.Http.Headers.AuthenticationHeaderValue[])">
            <summary>
            Tests whether an unauthorized result has exactly the same authentication header values as the provided ones as parameters.
            </summary>
            <param name="challenges">Parameters of authentication header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.WithAuthenticationHeaderChallenges(System.Action{MyTested.WebApi.Builders.Contracts.HttpActionResults.Unauthorized.IChallengesBuilder})">
            <summary>
            Tests whether an unauthorized result has exactly the same authentication header values as the provided ones from the challenges builder.
            </summary>
            <param name="challengesBuilder">Builder for creating collection of authentication header values.</param>
            <returns>Base test builder with action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpActionResults.Unauthorized.UnauthorizedTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining unauthorized result tests.
            </summary>
            <returns>Unauthorized result test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.FormattersBuilder">
            <summary>
            Used for testing media type formatters in a created result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.FormattersBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.FormattersBuilder" /> class.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.FormattersBuilder.ContainingMediaTypeFormatter(System.Net.Http.Formatting.MediaTypeFormatter)">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <param name="mediaTypeFormatter">Instance of MediaTypeFormatter.</param>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.FormattersBuilder.ContainingMediaTypeFormatterOfType``1">
            <summary>
            Tests whether created result contains the provided media type formatter.
            </summary>
            <typeparam name="TMediaTypeFormatter">Instance of MediaTypeFormatter.</typeparam>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.FormattersBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining formatters tests.
            </summary>
            <returns>The same formatters test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.HttpConfigurationBuilder">
            <summary>
            HTTP configuration builder.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpConfigurationBuilder.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.HttpConfigurationBuilder" /> class.
            </summary>
            <param name="httpConfiguration">HttpConfiguration instance used in the builder.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpConfigurationBuilder.AndStartsServer">
            <summary>
            Starts HTTP server with the provided configuration.
            </summary>
            <returns>Server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpConfigurationBuilder.WithErrorDetailPolicy(System.Web.Http.IncludeErrorDetailPolicy)">
            <summary>
            Sets the error detail policy used in the testing. Default is 'Always'.
            </summary>
            <param name="errorDetailPolicy">Error details policy to use.</param>
            <returns>The same HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpConfigurationBuilder.WithDependencyResolver(System.Web.Http.Dependencies.IDependencyResolver)">
            <summary>
            Sets the dependency resolver used in the testing.
            </summary>
            <param name="dependencyResolver">IDependencyResolver instance to use for all tests.</param>
            <returns>The same HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpConfigurationBuilder.WithDependencyResolver(System.Func{System.Web.Http.Dependencies.IDependencyResolver})">
            <summary>
            Sets the dependency resolver used in the testing by using construction function.
            </summary>
            <param name="construction">Construction function returning the dependency resolver.</param>
            <returns>The same HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpConfigurationBuilder.WithBaseAddress(System.String)">
            <summary>
            Sets the global base address to be used across the test cases. Default is local host.
            </summary>
            <param name="baseAddress">Base address to use.</param>
            <returns>The same HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.HttpConfigurationBuilder.WithInlineConstraintResolver(System.Web.Http.Routing.IInlineConstraintResolver)">
            <summary>
            Sets custom inline constraint resolver to http configuration
            </summary>
            <param name="inlineConstraintResolver">Custom route constraint resolver to use.</param>
            <returns>New HTTP configuration builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Models.HttpHandlerModelDetailsTestBuilder`1">
            <summary>
            Used for testing HTTP response message content model from HTTP message handler.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.HttpHandlerModelDetailsTestBuilder`1.#ctor(System.Net.Http.HttpMessageHandler,MyTested.WebApi.Builders.Contracts.HttpResponseMessages.IHttpHandlerResponseMessageTestBuilder,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Models.HttpHandlerModelDetailsTestBuilder`1" /> class.
            </summary>
            <param name="handler">The HTTP message handler, from which the response model is collected.</param>
            <param name="httpHandlerResponseMessageTestBuilder">The original HTTP handler response message test builder.</param>
            <param name="model">The response model to test.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.HttpHandlerModelDetailsTestBuilder`1.Passing(System.Action{`0})">
            <summary>
            Tests whether the returned response model from the HTTP response message passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the response model.</param>
            <returns>Builder for testing the HTTP response message.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.HttpHandlerModelDetailsTestBuilder`1.Passing(System.Func{`0,System.Boolean})">
            <summary>
            Tests whether the returned response model from the HTTP response message passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the response model.</param>
            <returns>Builder for testing the HTTP response message.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.HttpHandlerModelDetailsTestBuilder`1.AndProvideTheModel">
            <summary>
            Gets the HTTP response message content model used in the testing.
            </summary>
            <returns>Instance of the content model type.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Models.BaseResponseModelTestBuilder`1">
            <summary>
            Base class for all response model test builders.
            </summary>
            <typeparam name="TActionResult">Result from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.BaseResponseModelTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Models.BaseResponseModelTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="actionResult">Result from the tested action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.BaseResponseModelTestBuilder`1.WithResponseModelOfType``1">
            <summary>
            Tests whether certain type of response model is returned from the invoked action.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.BaseResponseModelTestBuilder`1.WithResponseModel``1(``0)">
            <summary>
            Tests whether a deeply equal object to the provided one is returned from the invoked action.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="expectedModel">Expected model to be returned.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Models.ModelDetailsTestBuilder`1">
            <summary>
            Used for testing the response model members.
            </summary>
            <typeparam name="TResponseModel">Response model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelDetailsTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Models.ModelDetailsTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="responseModel">Response model from invoked action.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelDetailsTestBuilder`1.Passing(System.Action{`0})">
            <summary>
            Tests whether the returned response model from the invoked action passes given assertions.
            </summary>
            <param name="assertions">Action containing all assertions on the response model.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelDetailsTestBuilder`1.Passing(System.Func{`0,System.Boolean})">
            <summary>
            Tests whether the returned response model from the invoked action passes given predicate.
            </summary>
            <param name="predicate">Predicate testing the response model.</param>
            <returns>Builder for testing the response model errors.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1">
            <summary>
            Used for testing specific model errors.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,MyTested.WebApi.Builders.Contracts.Models.IAndModelErrorTestBuilder{`0},System.String,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.ModelError})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="model">Model returned from action result.</param>
            <param name="modelErrorTestBuilder">Original model error test builder.</param>
            <param name="errorKey">Key in ModelStateDictionary corresponding to this particular error.</param>
            <param name="aggregatedErrors">All errors found in ModelStateDictionary for given error key.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.ThatEquals(System.String)">
            <summary>
            Tests whether particular error message is equal to given message.
            </summary>
            <param name="errorMessage">Expected error message for particular key.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.BeginningWith(System.String)">
            <summary>
            Tests whether particular error message begins with given message.
            </summary>
            <param name="beginMessage">Expected beginning for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.EndingWith(System.String)">
            <summary>
            Tests whether particular error message ends with given message.
            </summary>
            <param name="endMessage">Expected ending for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.Containing(System.String)">
            <summary>
            Tests whether particular error message contains given message.
            </summary>
            <param name="containsMessage">Expected containing string for particular error message.</param>
            <returns>The original model error test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.ContainingModelStateError(System.String)">
            <summary>
            Tests whether tested action's model state contains error by key.
            </summary>
            <param name="errorKey">Error key to search for.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.ContainingModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for errors.</typeparam>
            <param name="memberWithError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.ContainingNoModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains no error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for no errors.</typeparam>
            <param name="memberWithNoError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorDetailsTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining error message tests.
            </summary>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder">
            <summary>
            Used for testing the model errors.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder.#ctor(System.Web.Http.ApiController,System.String,System.Exception,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="modelState">Optional model state dictionary to use the class with. Default is controller's model state.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder.ModelState">
            <summary>
            Gets validated model state of the provided ASP.NET Web API controller instance.
            </summary>
            <value>Model state dictionary containing all validation errors.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder.ContainingNoModelStateErrors">
            <summary>
            Tests whether tested action's model state is valid.
            </summary>
            <returns>Base test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1">
            <summary>
            Used for testing the model errors.
            </summary>
            <typeparam name="TModel">Model from invoked action in ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1.#ctor(System.Web.Http.ApiController,System.String,System.Exception,`0,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1" /> class.
            </summary>
            <param name="controller">Controller on which the action will be tested.</param>
            <param name="actionName">Name of the tested action.</param>
            <param name="caughtException">Caught exception during the action execution.</param>
            <param name="model">Model returned from action result.</param>
            <param name="modelState">Optional model state dictionary to use the class with. Default is controller's model state.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1.Model">
            <summary>
            Gets model from invoked action in ASP.NET Web API controller.
            </summary>
            <value>Model from invoked action.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1.ContainingModelStateError(System.String)">
            <summary>
            Tests whether tested action's model state contains error by key.
            </summary>
            <param name="errorKey">Error key to search for.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1.ContainingModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for errors.</typeparam>
            <param name="memberWithError">Member expression for the tested member.</param>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1.ContainingNoModelStateErrorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Tests whether tested action's model state contains no error by member expression.
            </summary>
            <typeparam name="TMember">Type of the member which will be tested for no errors.</typeparam>
            <param name="memberWithNoError">Member expression for the tested member.</param>
            <returns>This instance in order to support method chaining.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1.AndAlso">
            <summary>
            AndAlso method for better readability when chaining error message tests.
            </summary>
            <returns>Model error details test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Models.ModelErrorTestBuilder`1.AndProvideTheModel">
            <summary>
            Gets the model returned from an action result.
            </summary>
            <returns>Model returned from action result.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Routes.BaseRouteTestBuilder">
            <summary>
            Base class for all route test builders.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.BaseRouteTestBuilder.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Routes.BaseRouteTestBuilder" /> class.
            </summary>
            <param name="httpConfiguration">Instance of HttpConfiguration.</param>
        </member>
        <member name="P:MyTested.WebApi.Builders.Routes.BaseRouteTestBuilder.HttpConfiguration">
            <summary>
            Gets the HTTP configuration used in the route test.
            </summary>
            <value>Instance of HttpConfiguration.</value>
        </member>
        <member name="T:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder">
            <summary>
            Used for building a request for route test.
            </summary>
            <summary>
            Used for building and testing a route.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithHttpMethod(System.String)">
            <summary>
            Adds HTTP method to the built route test.
            </summary>
            <param name="httpMethod">HTTP method represented by string.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithHttpMethod(System.Net.Http.HttpMethod)">
            <summary>
            Adds HTTP method to the built route test.
            </summary>
            <param name="httpMethod">HTTP method represented by HttpMethod.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithRequestHeader(System.String,System.String)">
            <summary>
            Add HTTP header to the built route test. 
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithRequestHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add HTTP header to the built route test. 
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithRequestHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of HTTP headers to the built route test.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithContentHeader(System.String,System.String)">
            <summary>
            Add HTTP content header to the built route test. 
            </summary>
            <param name="name">Name of the content header.</param>
            <param name="value">Value of the content header.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithContentHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add HTTP content header to the built route test. 
            </summary>
            <param name="name">Name of the content header.</param>
            <param name="values">Collection of values for the content header.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithContentHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds collection of HTTP content headers to the built route test.
            </summary>
            <param name="headers">Dictionary of content headers to add.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithFormUrlEncodedContent(System.String)">
            <summary>
            Adds URL encoded content to the built route test.
            </summary>
            <param name="content">URL encoded content represented by string.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithJsonContent(System.String)">
            <summary>
            Adds JSON content to the built route test.
            </summary>
            <param name="content">JSON content represented by string.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithContent(System.String,System.String)">
            <summary>
            Adds content to the built route test.
            </summary>
            <param name="content">Content represented by string.</param>
            <param name="mediaType">Media type of the content represented by string.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.WithContent(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Adds content to the built route test.
            </summary>
            <param name="content">Content represented by string.</param>
            <param name="mediaType">Media type of the content represented by MediaTypeHeaderValue.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.#ctor(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder" /> class.
            </summary>
            <param name="httpConfiguration">HTTP configuration to use for the route test.</param>
            <param name="location">URI location represented by string.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpRequestMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder" /> class.
            </summary>
            <param name="httpConfiguration">HTTP configuration to use for the route test.</param>
            <param name="requestMessage">HTTP request message to use for the route test.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToAction(System.String)">
            <summary>
            Tests whether the built route is resolved to the provided action.
            </summary>
            <param name="action">Expected action name.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToController(System.String)">
            <summary>
            Tests whether the built route is resolved to the provided controller name.
            </summary>
            <param name="controller">Expected controller name.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.To``1">
            <summary>
            Tests whether the built route is resolved to the provided controller type.
            </summary>
            <typeparam name="TController">Expected controller type.</typeparam>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.To``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Tests whether the built route is resolved to the action provided by the expression.
            </summary>
            <typeparam name="TController">Type of expected resolved controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected resolved action.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.To``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tests whether the built route is resolved to the action provided by the expression.
            </summary>
            <typeparam name="TController">Type of expected resolved controller.</typeparam>
            <param name="actionCall">Method call expression indicating the expected resolved action.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToNotAllowedMethod">
            <summary>
            Tests whether the built route cannot be resolved because of not allowed method.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToNonExistingRoute">
            <summary>
            Tests whether the built route cannot be resolved.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToIgnoredRoute">
            <summary>
            Tests whether the built route is ignored by StopRoutingHandler.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToHandlerOfType``1">
            <summary>
            Tests whether the resolved route will be handled by a HttpMessageHandler of the provided type.
            </summary>
            <typeparam name="THandler">Type of HttpMessageHandler.</typeparam>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToNoHandlerOfType``1">
            <summary>
            Tests whether the resolved route will not be handled by a HttpMessageHandler of the provided type.
            </summary>
            <typeparam name="THandler">Type of HttpMessageHandler.</typeparam>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToNoHandler">
            <summary>
            Tests whether the resolved route will not be handled by any HttpMessageHandler.
            </summary>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToValidModelState">
            <summary>
            Tests whether the resolved route will have valid model state.
            </summary>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.ToInvalidModelState(System.Nullable{System.Int32})">
            <summary>
            Tests whether the resolved route will have invalid model state.
            </summary>
            <param name="withNumberOfErrors">Expected number of errors. If default null is provided, the test builder checks only if any errors are found.</param>
            <returns>The same route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.And">
            <summary>
            And method for better readability when building route HTTP request message.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.ShouldMapTestBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when building route tests.
            </summary>
            <returns>The same route builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Routes.RouteTestBuilder">
            <summary>
            Used for building a route test.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.RouteTestBuilder.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Routes.RouteTestBuilder" /> class.
            </summary>
            <param name="httpConfiguration">HttpConfiguration to use for the route test.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.RouteTestBuilder.ShouldMap(System.String)">
            <summary>
            Sets the route location to test.
            </summary>
            <param name="location">Location as string.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.RouteTestBuilder.ShouldMap(System.Uri)">
            <summary>
            Sets the route location to test.
            </summary>
            <param name="location">Location as Uri.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.RouteTestBuilder.ShouldMap(System.Net.Http.HttpRequestMessage)">
            <summary>
            Sets the route HTTP request message to test.
            </summary>
            <param name="requestMessage">Instance of type HttpRequestMessage.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Routes.RouteTestBuilder.ShouldMap(System.Action{MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Sets the route HTTP request message to test using a builder.
            </summary>
            <param name="httpRequestMessageBuilder">Builder for HTTP request message.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Servers.Server">
            <summary>
            Provides options to start and stop HTTP servers, as well as processing HTTP requests for full pipeline testing.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.Starts(System.Web.Http.HttpConfiguration)">
            <summary>
            Starts new global HTTP server.
            </summary>
            <param name="httpConfiguration">Optional HTTP configuration to use. If no configuration is provided, the global configuration will be used instead.</param>
            <returns>Server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.Starts``1(System.Int32,System.String)">
            <summary>
            Starts new global OWIN server.
            </summary>
            <typeparam name="TStartup">OWIN startup class to use.</typeparam>
            <param name="port">Network port on which the server will listen for requests.</param>
            <param name="host">Network host on which the server will listen for requests.</param>
            <returns>Server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.IsLocatedAt(System.String)">
            <summary>
            Configures global remote server.
            </summary>
            <param name="baseAddress">Base address to use for the requests.</param>
            <returns>Server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.Stops">
            <summary>
            Stops all currently started global HTTP or OWIN servers.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.Working">
            <summary>
            Processes HTTP requests on globally started HTTP or OWIN servers. If global OWIN server is started, it will be used. If not the method will check for global HTTP server to use. If such is not found, a new instance of HTTP server is created with the global HTTP configuration.
            </summary>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.Working(System.Web.Http.HttpConfiguration)">
            <summary>
            Starts new HTTP server to process a request.
            </summary>
            <param name="httpConfiguration">HTTP configuration to use in the testing.</param>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.Working``1(System.Int32,System.String)">
            <summary>
            Starts new OWIN server to process a request.
            </summary>
            <typeparam name="TStartup">OWIN startup class to use.</typeparam>
            <param name="port">Network port on which the server will listen for requests.</param>
            <param name="host">Network host on which the server will listen for requests.</param>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.WorkingRemotely">
            <summary>
            Processes HTTP request on globally configured remote HTTP server.
            </summary>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.Server.WorkingRemotely(System.String)">
            <summary>
            Processes HTTP request on the remote HTTP server located at the provided base address.
            </summary>
            <param name="baseAddress">Base address to use for the requests.</param>
            <returns>Server builder to set specific HTTP requests.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Servers.ServerTestBuilder">
            <summary>
            Provides options to set the HTTP request and test the HTTP response.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.#ctor(System.Net.Http.HttpClient,System.Boolean,System.Boolean,System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Servers.ServerTestBuilder" /> class.
            </summary>
            <param name="client">HTTP message invoker to send the request.</param>
            <param name="transformRequest">Indicates whether to transform relative to fake absolute request URI.</param>
            <param name="disposeServer">Indicates whether to dispose the server and the client after the test completes.</param>
            <param name="server">IDisposable server to use for the request.</param>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.WithDefaultRequestHeader(System.String,System.String)">
            <summary>
            Adds default header to every request tested on the server.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.WithDefaultRequestHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds default header to every request tested on the server.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.WithDefaultRequestHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds default collection of headers to every request tested on the server.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.WithCancellationTokenSource(System.Threading.CancellationTokenSource)">
            <summary>
            Adds cancellation token source to the server request.
            </summary>
            <param name="cancellationTokenSource">Cancellation token source to use for the server request.</param>
            <returns>The same server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.WithoutDefaultRequestHeader(System.String)">
            <summary>
            Removes a previously added default header from every request tested on the server.
            </summary>
            <param name="name">Name of the header.</param>
            <returns></returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.WithHttpRequestMessage(System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds HTTP request message to the tested server.
            </summary>
            <param name="requestMessage">Instance of HttpRequestMessage.</param>
            <returns>Server test builder to test the returned HTTP response.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.WithHttpRequestMessage(System.Action{MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Adds HTTP request message to the tested server.
            </summary>
            <param name="httpRequestMessageBuilder">Builder for HTTP request message.</param>
            <returns>Server test builder to test the returned HTTP response.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Servers.ServerTestBuilder.ShouldReturnHttpResponseMessage">
            <summary>
            Tests for a particular HTTP response message.
            </summary>
            <returns>HTTP response message test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Uris.MockedUriBuilder">
            <summary>
            Used for creating URI.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Uris.MockedUriBuilder" /> class.
            </summary>
        </member>
        <member name="P:MyTested.WebApi.Builders.Uris.MockedUriBuilder.MockedUri">
            <summary>
            Gets the built mocked URI instance.
            </summary>
            <value>Mocked URI.</value>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriBuilder.WithHost(System.String)">
            <summary>
            Adds host to the built URI.
            </summary>
            <param name="host">Host part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriBuilder.WithPort(System.Int32)">
            <summary>
            Adds port to the built URI.
            </summary>
            <param name="port">Port part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriBuilder.WithAbsolutePath(System.String)">
            <summary>
            Adds absolute path to the built URI.
            </summary>
            <param name="absolutePath">Absolute path part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriBuilder.WithScheme(System.String)">
            <summary>
            Adds scheme to the built URI.
            </summary>
            <param name="scheme">Scheme part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriBuilder.WithQuery(System.String)">
            <summary>
            Adds query string to the built URI.
            </summary>
            <param name="query">Query part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriBuilder.WithFragment(System.String)">
            <summary>
            Adds fragment to the built URI.
            </summary>
            <param name="fragment">Document fragment part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when chaining URI builder.
            </summary>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder">
            <summary>
            Used for testing URI location in a created result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder" /> class.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder.WithHost(System.String)">
            <summary>
            Tests whether the URI has the same host as the provided one.
            </summary>
            <param name="host">Host part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder.WithPort(System.Int32)">
            <summary>
            Tests whether the URI has the same port as the provided one.
            </summary>
            <param name="port">Port part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder.WithAbsolutePath(System.String)">
            <summary>
            Tests whether the URI has the same absolute path as the provided one.
            </summary>
            <param name="absolutePath">Absolute path part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder.WithScheme(System.String)">
            <summary>
            Tests whether the URI has the same scheme as the provided one.
            </summary>
            <param name="scheme">Scheme part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder.WithQuery(System.String)">
            <summary>
            Tests whether the URI has the same query as the provided one.
            </summary>
            <param name="query">Query part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Uris.MockedUriTestBuilder.WithFragment(System.String)">
            <summary>
            Tests whether the URI has the same fragment as the provided one.
            </summary>
            <param name="fragment">Document fragment part of URI.</param>
            <returns>The same URI test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Builders.Identity.UserBuilder">
            <summary>
            Used for building mocked Controller.User object.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Builders.Identity.UserBuilder" /> class.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.WithIdentifier(System.String)">
            <summary>
            Used for setting ID to the mocked user object.
            </summary>
            <param name="identifier">The user Id to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.WithUsername(System.String)">
            <summary>
            Used for setting username to the mocked user object.
            </summary>
            <param name="username">The username to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.WithClaim(System.Security.Claims.Claim)">
            <summary>
            Used to adding claim to the mocked user object.
            </summary>
            <param name="claim">The user claim to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.WithAuthenticationType(System.String)">
            <summary>
            Used for setting authentication type to the mocked user object.
            </summary>
            <param name="authenticationType">The authentication type to set.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.InRole(System.String)">
            <summary>
            Used for adding user role to the mocked user object.
            </summary>
            <param name="role">The user role to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.InRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used for adding multiple user roles to the mocked user object.
            </summary>
            <param name="roles">Collection of roles to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.InRoles(System.String[])">
            <summary>
            Used for adding multiple user roles to the mocked user object.
            </summary>
            <param name="roles">Roles to add.</param>
            <returns>The same user builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.Builders.Identity.UserBuilder.AndAlso">
            <summary>
            AndAlso method for better readability when building user.
            </summary>
            <returns>The same user builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.Common.Extensions.HttpConfigurationExtensions">
            <summary>
            Provides extension methods to HttpConfiguration.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.Extensions.HttpConfigurationExtensions.TryResolve``1(System.Web.Http.HttpConfiguration)">
            <summary>
            Tries to resolve a type by using the configuration's IDependencyResolver. 
            </summary>
            <typeparam name="T">Type to resolve.</typeparam>
            <param name="configuration">Instance of HttpConfiguration.</param>
            <returns>Resolved instance of T or null, if unsuccessful.</returns>
        </member>
        <member name="T:MyTested.WebApi.Common.Extensions.HttpRequestMessageExtensions">
            <summary>
            Provides extension methods to HttpRequestMessage.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.Extensions.HttpRequestMessageExtensions.TransformToAbsoluteRequestUri(System.Net.Http.HttpRequestMessage)">
            <summary>
            Transforms HTTP request URI from relative to absolute with fake host.
            </summary>
            <param name="request">HTTP request message to transform.</param>
        </member>
        <member name="T:MyTested.WebApi.Common.Extensions.ObjectExtensions">
            <summary>
            Provides extension methods to Object class.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.Extensions.ObjectExtensions.GetName(System.Object)">
            <summary>
            Gets friendly type name of object. Useful for generic types.
            </summary>
            <param name="obj">Object to get friendly name from.</param>
            <returns>Friendly name as string.</returns>
        </member>
        <member name="T:MyTested.WebApi.Common.Extensions.EnumerableExtensions">
            <summary>
            Provides extension methods to IEnumerable.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Provides easier linear traversing over all items in collection and executing a function on each of them.
            </summary>
            <typeparam name="T">Type of objects in the collection.</typeparam>
            <param name="collection">Collection to traverse.</param>
            <param name="action">Function to execute on each item in the collection.</param>
        </member>
        <member name="T:MyTested.WebApi.Common.Servers.RemoteServer">
            <summary>
            Test server for remote server testing.
            </summary>
        </member>
        <member name="P:MyTested.WebApi.Common.Servers.RemoteServer.GlobalClient">
            <summary>
            Gets the global HTTP client used to send the request.
            </summary>
            <value>HttpClient instance.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Servers.RemoteServer.GlobalIsConfigured">
            <summary>
            Gets a value indicating whether the remote server is configured and requests can be sent.
            </summary>
            <value>True or false.</value>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.RemoteServer.CreateNewClient(System.String)">
            <summary>
            Creates new HTTP client for the remote server.
            </summary>
            <param name="baseAddress">Base address to use for the requests.</param>
            <returns>HttpClient instance.</returns>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.RemoteServer.ConfigureGlobal(System.String)">
            <summary>
            Configures singleton global instance of the HTTP remote server client.
            </summary>
            <param name="baseAddress">Base address to use for the requests.</param>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.RemoteServer.DisposeGlobal">
            <summary>
            Disposes the global HTTP remote server client.
            </summary>
            <returns>True or false, indicating whether the client was disposed successfully.</returns>
        </member>
        <member name="T:MyTested.WebApi.Common.Servers.HttpTestServer">
            <summary>
            Test server for full pipeline testing.
            </summary>
        </member>
        <member name="P:MyTested.WebApi.Common.Servers.HttpTestServer.GlobalServer">
            <summary>
            Gets the global HTTP server used in the testing.
            </summary>
            <value>HttpServer instance.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Servers.HttpTestServer.GlobalClient">
            <summary>
            Gets the global HTTP client used to send the request.
            </summary>
            <value>HttpClient instance.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Servers.HttpTestServer.GlobalIsStarted">
            <summary>
            Gets a value indicating whether the HTTP server is started and listening for requests.
            </summary>
            <value>True or false.</value>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.HttpTestServer.CreateNewClient(System.Web.Http.HttpConfiguration)">
            <summary>
            Creates new HTTP client for the server.
            </summary>
            <param name="httpConfiguration">HTTP configuration to use for the requests.</param>
            <returns>HttpClient instance.</returns>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.HttpTestServer.StartGlobal(System.Web.Http.HttpConfiguration)">
            <summary>
            Starts singleton global instance of the HTTP server.
            </summary>
            <param name="httpConfiguration">HTTP configuration to use for the requests.</param>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.HttpTestServer.StopGlobal">
            <summary>
            Stops and disposes the global HTTP server.
            </summary>
            <returns>True or false, indicating whether the server was stopped successfully.</returns>
        </member>
        <member name="T:MyTested.WebApi.Common.Servers.OwinTestServer">
            <summary>
            Test server for full OWIN pipeline testing.
            </summary>
        </member>
        <member name="P:MyTested.WebApi.Common.Servers.OwinTestServer.GlobalServer">
            <summary>
            Gets the global OWIN server used in the testing.
            </summary>
            <value>Test server instance.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Servers.OwinTestServer.GlobalClient">
            <summary>
            Gets the global OWIN client used to send the request.
            </summary>
            <value>HttpClient instance.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Servers.OwinTestServer.GlobalIsStarted">
            <summary>
            Gets a value indicating whether the HTTP is started and listening for requests.
            </summary>
            <value>True or false.</value>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.OwinTestServer.CreateNewServer``1(System.String)">
            <summary>
            Creates new OWIN server.
            </summary>
            <typeparam name="TStartup">OWIN startup class to use.</typeparam>
            <param name="baseAddress">Base address to use for the requests.</param>
            <returns>OWIN test server.</returns>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.OwinTestServer.StartGlobal``1(System.String)">
            <summary>
            Starts singleton global instance of the OWIN server.
            </summary>
            <typeparam name="TStartup">OWIN startup class to use.</typeparam>
            <param name="baseAddress">Base address to use for the requests.</param>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.OwinTestServer.StopGlobal">
            <summary>
            Stops and disposes the global OWIN server.
            </summary>
            <returns>True or false, indicating whether the server was stopped successfully.</returns>
        </member>
        <member name="T:MyTested.WebApi.Common.Servers.ServerHttpMessageHandler">
            <summary>
            HTTP message handler to process pipeline test cases.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.ServerHttpMessageHandler.#ctor(System.Net.Http.HttpMessageInvoker,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Common.Servers.ServerHttpMessageHandler" /> class.
            </summary>
            <param name="httpMessageInvoker">HTTP message invoker to process the request.</param>
            <param name="disposeInvoker">Indicates whether the invoker should be disposed after request processing.</param>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.ServerHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends the HTTP request to the provided server.
            </summary>
            <param name="request">HTTP request message to send.</param>
            <param name="cancellationToken">The cancellation token to cancel operation.</param>
            <returns>Task of HttpResponseMessage.</returns>
        </member>
        <member name="M:MyTested.WebApi.Common.Servers.ServerHttpMessageHandler.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.Net.Http.HttpMessageHandler and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources, false to releases only unmanaged resources.</param>
        </member>
        <member name="T:MyTested.WebApi.Common.ActionInfo`1">
            <summary>
            Contains information about invoked action.
            </summary>
            <typeparam name="TActionResult">The action return type.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.Common.ActionInfo`1.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object},`0,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Common.ActionInfo`1" /> class.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="actionAttributes">Collection of action attributes.</param>
            <param name="actionResult">Action return value.</param>
            <param name="caughtException">Caught exception during action execution.</param>
        </member>
        <member name="P:MyTested.WebApi.Common.ActionInfo`1.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>The action name as string.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.ActionInfo`1.ActionAttributes">
            <summary>
            Gets the action attributes.
            </summary>
            <value>IEnumerable of objects.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.ActionInfo`1.ActionResult">
            <summary>
            Gets the return value of the action.
            </summary>
            <value>The action result as TActionResult.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.ActionInfo`1.CaughtException">
            <summary>
            Gets or sets the caught exception during the action execution.
            </summary>
            <value>Action execution exception.</value>
        </member>
        <member name="T:MyTested.WebApi.Common.MockedUri">
            <summary>
            Mocked URI object.
            </summary>
        </member>
        <member name="P:MyTested.WebApi.Common.MockedUri.Host">
            <summary>
            Gets or sets the host of the mocked URI.
            </summary>
            <value>Host as string.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.MockedUri.Port">
            <summary>
            Gets or sets the port of the mocked URI.
            </summary>
            <value>Port as integer.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.MockedUri.AbsolutePath">
            <summary>
            Gets or sets the absolute path of the mocked URI.
            </summary>
            <value>Absolute path as string.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.MockedUri.Scheme">
            <summary>
            Gets or sets the scheme of the mocked URI.
            </summary>
            <value>Scheme as string.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.MockedUri.Query">
            <summary>
            Gets or sets the query of the mocked URI.
            </summary>
            <value>Query as string.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.MockedUri.Fragment">
            <summary>
            Gets or sets the document fragment of the mocked URI.
            </summary>
            <value>Document fragment as string.</value>
        </member>
        <member name="T:MyTested.WebApi.Common.Routes.ExpressionParsedRouteInfo">
            <summary>
            Contains route information from parsed expression.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.Routes.ExpressionParsedRouteInfo.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{MyTested.WebApi.Common.MethodArgumentInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Common.Routes.ExpressionParsedRouteInfo" /> class.
            </summary>
            <param name="controller">Controller type.</param>
            <param name="action">Action name.</param>
            <param name="arguments">IEnumerable of action arguments.</param>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ExpressionParsedRouteInfo.Controller">
            <summary>
            Gets the controller type from the parsed expression.
            </summary>
            <value>The controller type.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ExpressionParsedRouteInfo.Action">
            <summary>
            Gets the action name from the parsed expression.
            </summary>
            <value>The action type.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ExpressionParsedRouteInfo.Arguments">
            <summary>
            Gets the action arguments the parsed expression.
            </summary>
            <value>Dictionary of string-argument info pairs.</value>
        </member>
        <member name="M:MyTested.WebApi.Common.Routes.ExpressionParsedRouteInfo.ToRouteValueDictionary">
            <summary>
            Converts the parsed information to route value dictionary.
            </summary>
            <returns>Dictionary of string-object pairs.</returns>
        </member>
        <member name="T:MyTested.WebApi.Common.Routes.ResolvedRouteInfo">
            <summary>
            Contains information about a resolved route from the ASP.NET Web API internal pipeline.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.#ctor(System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Common.Routes.ResolvedRouteInfo" /> class.
            </summary>
            <param name="controller">Resolved controller type for the current route.</param>
            <param name="action">Resolved action name for the current route.</param>
            <param name="actionArguments">Resolved dictionary of the action arguments for the current route.</param>
            <param name="httpMessageHandler">Resolved HttpMessageHandler for the current route.</param>
            <param name="modelState">Resolved model state validation for the current route.</param>
        </member>
        <member name="M:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Common.Routes.ResolvedRouteInfo" /> class.
            </summary>
            <param name="unresolvedError">Received error during the route resolving.</param>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.IsResolved">
            <summary>
            Gets a value indicating whether the current route is successfully resolved.
            </summary>
            <value>True or false.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.UnresolvedError">
            <summary>
            Gets route error in case of unsuccessful resolving.
            </summary>
            <value>The error as string or null, if the route was resolved successfully.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.Controller">
            <summary>
            Gets the resolved controller type for the current route.
            </summary>
            <value>Type of the controller.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.Action">
            <summary>
            Gets the resolved action name for the current route.
            </summary>
            <value>The action name as string.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.ActionArguments">
            <summary>
            Gets the resolved action arguments for the current route.
            </summary>
            <value>Dictionary of string-argument pairs.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.HttpMessageHandler">
            <summary>
            Gets the resolved HttpMessageHandler for the current route.
            </summary>
            <value>Instance of HttpMessageHandler.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.ModelState">
            <summary>
            Gets the resolved model state validation for the current route.
            </summary>
            <value>Instance of ModelStateDictionary.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.IsIgnored">
            <summary>
            Gets a value indicating whether the current route is ignored with StopRoutingHandler.
            </summary>
            <value>True or false.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.Routes.ResolvedRouteInfo.MethodIsNotAllowed">
            <summary>
            Gets a value indicating whether the current route is not resolved because of not allowed method.
            </summary>
            <value>True or false.</value>
        </member>
        <member name="T:MyTested.WebApi.Common.MethodArgumentInfo">
            <summary>
            Method argument information containing name, type and value for an method parameter.
            </summary>
        </member>
        <member name="P:MyTested.WebApi.Common.MethodArgumentInfo.Name">
            <summary>
            Gets or sets the name of the argument.
            </summary>
            <value>Argument's name.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.MethodArgumentInfo.Type">
            <summary>
            Gets or sets the type of the argument.
            </summary>
            <value>Argument's type.</value>
        </member>
        <member name="P:MyTested.WebApi.Common.MethodArgumentInfo.Value">
            <summary>
            Gets or sets the value of the argument.
            </summary>
            <value>Argument's value.</value>
        </member>
        <member name="T:MyTested.WebApi.Common.MockedIPrincipal">
            <summary>
            Mocked IPrinciple object.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.MockedIPrincipal.#ctor(System.String,System.Collections.Generic.ICollection{System.Security.Claims.Claim},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MyTested.WebApi.Common.MockedIPrincipal" /> class.
            </summary>
            <param name="authenticationType">Initial principal type.</param>
            <param name="claims">Initial user claims.</param>
            <param name="roles">Initial user roles.</param>
        </member>
        <member name="P:MyTested.WebApi.Common.MockedIPrincipal.Identity">
            <summary>
            Gets the IIdentity of the IPrinciple.
            </summary>
            <value>IIdentity object.</value>
        </member>
        <member name="M:MyTested.WebApi.Common.MockedIPrincipal.CreateUnauthenticated">
            <summary>
            Static constructor for creating default unauthenticated mocked user object.
            </summary>
            <returns>Unauthenticated IPrincipal.</returns>
        </member>
        <member name="M:MyTested.WebApi.Common.MockedIPrincipal.CreateDefaultAuthenticated">
            <summary>
            Static constructor for creating default authenticated mocked user object with "TestUser" username.
            </summary>
            <returns>Authenticated IPrincipal.</returns>
        </member>
        <member name="M:MyTested.WebApi.Common.MockedIPrincipal.IsInRole(System.String)">
            <summary>
            Checks whether the current user is in user role.
            </summary>
            <param name="role">User role to check.</param>
            <returns>True or False.</returns>
        </member>
        <member name="T:MyTested.WebApi.Common.VoidActionResult">
            <summary>
            Represents void action result in generic test builder.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Common.VoidActionResult.Create">
            <summary>
            Creates new instance of <see cref="T:MyTested.WebApi.Common.VoidActionResult"/>.
            </summary>
            <returns>Void action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.UnresolvedRouteConstraintsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UnresolvedRouteConstraintsException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.InvalidCallAssertionException">
            <summary>
            Exception for invalid test call.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.InvalidCallAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidCallAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.AttributeAssertionException">
            <summary>
            Exception for invalid attributes.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.AttributeAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AttributeAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.BadRequestResultAssertionException">
            <summary>
            Exception for invalid bad request result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.BadRequestResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BadRequestResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.ContentResultAssertionException">
            <summary>
            Exception for invalid content result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.ContentResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContentResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.CreatedResultAssertionException">
            <summary>
            Exception for invalid created result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.CreatedResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CreatedResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.HttpActionResultAssertionException">
            <summary>
            Exception for invalid action return type when expecting IHttpActionResult.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.HttpActionResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpActionResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.HttpHandlerAssertionException">
            <summary>
            Exception for invalid HTTP handler.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.HttpHandlerAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpHandlerAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.HttpResponseMessageAssertionException">
            <summary>
            Exception for invalid HTTP response message result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.HttpResponseMessageAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpResponseMessageAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.HttpStatusCodeResultAssertionException">
            <summary>
            Exception for invalid status code result when expecting certain HTTP status code.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.HttpStatusCodeResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpStatusCodeResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.InternalServerErrorResultAssertionException">
            <summary>
            Exception for invalid internal server error result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.InternalServerErrorResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InternalServerErrorResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.InvalidExceptionAssertionException">
            <summary>
            Exception for invalid expected exceptions.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.InvalidExceptionAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidExceptionAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.InvalidHttpRequestMessageException">
            <summary>
            Exception for invalid HTTP request message.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.InvalidHttpRequestMessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidHttpRequestMessageException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.JsonResultAssertionException">
            <summary>
            Exception for invalid JSON result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.JsonResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the JSONResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.OkResultAssertionException">
            <summary>
            Exception for invalid ok result.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.OkResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OkResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.ResponseModelAssertionException">
            <summary>
            Exception for invalid action return type when expecting response model.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.ResponseModelAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResponseModelAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.ModelErrorAssertionException">
            <summary>
            Exception for model with errors.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.ModelErrorAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ModelErrorAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.RouteAssertionException">
            <summary>
            Exception for invalid route test.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.RouteAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RouteAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.UnauthorizedResultAssertionException">
            <summary>
            Exception for invalid unauthorized result when authentication header challenges do not match.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.UnauthorizedResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UnauthorizedResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.UnresolvedDependenciesException">
            <summary>
            Exception for controller unresolved dependencies.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.UnresolvedDependenciesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UnresolvedDependenciesException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.Exceptions.RedirectResultAssertionException">
            <summary>
            Exception for invalid URI validation.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Exceptions.RedirectResultAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RedirectResultAssertionException class.
            </summary>
            <param name="message">Message for System.Exception class.</param>
        </member>
        <member name="T:MyTested.WebApi.HttpContentHeader">
            <summary>
            Contains common HTTP content header names.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.Allow">
            <summary>
            Represents Allow content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.ContentDisposition">
            <summary>
            Represents ContentDisposition content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.ContentEncoding">
            <summary>
            Represents ContentEncoding content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.ContentLanguage">
            <summary>
            Represents ContentLanguage content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.ContentLength">
            <summary>
            Represents ContentLength content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.ContentLocation">
            <summary>
            Represents ContentLocation content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.ContentMD5">
            <summary>
            Represents ContentMD5 content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.ContentRange">
            <summary>
            Represents ContentRange content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.ContentType">
            <summary>
            Represents ContentType content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.Expires">
            <summary>
            Represents Expires content header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpContentHeader.LastModified">
            <summary>
            Represents LastModified content header name.
            </summary>
        </member>
        <member name="T:MyTested.WebApi.IHttpMessageHandlerBuilder">
            <summary>
            Used for building HTTP message handlers tests.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.IHttpMessageHandlerBuilder.WithInnerHandler``1">
            <summary>
            Sets inner HTTP handler to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IHttpMessageHandlerBuilder.WithInnerHandler``1(``0)">
            <summary>
            Sets the provided instance as an inner HTTP handler to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="innerHandler">Instance of type HttpMessageHandler.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IHttpMessageHandlerBuilder.WithInnerHandler``1(System.Func{``0})">
            <summary>
            Sets inner HTTP handler by using construction function to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="construction">Construction function returning the instantiated inner HttpMessageHandler.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IHttpMessageHandlerBuilder.WithInnerHandler``1(System.Action{MyTested.WebApi.Builders.Contracts.Handlers.IInnerHttpMessageHandlerBuilder})">
            <summary>
            Sets inner HTTP handler by using builder to the current handler, if it is of type DelegatingHandler. 
            </summary>
            <typeparam name="TInnerHandler">Inner HttpMessageHandler type to set.</typeparam>
            <param name="httpMessageHandlerBuilder">Inner HttpMessageHandler builder.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IHttpMessageHandlerBuilder.WithHttpConfiguration(System.Web.Http.HttpConfiguration)">
            <summary>
            Sets the HTTP configuration for the current test case.
            </summary>
            <param name="config">Instance of HttpConfiguration.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IHttpMessageHandlerBuilder.WithHttpRequestMessage(System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds HTTP request message to the tested handler.
            </summary>
            <param name="requestMessage">Instance of HttpRequestMessage.</param>
            <returns>The same HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IHttpMessageHandlerBuilder.WithHttpRequestMessage(System.Action{MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Adds HTTP request message to the tested handler.
            </summary>
            <param name="httpRequestMessageBuilder">Builder for HTTP request message.</param>
            <returns>The HTTP handler builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IHttpMessageHandlerBuilder.AndProvideTheHttpConfiguration">
            <summary>
            Gets the HTTP configuration used in the handler testing.
            </summary>
            <returns>Instance of HttpConfiguration.</returns>
        </member>
        <member name="T:MyTested.WebApi.IRouteTestBuilder">
            <summary>
            Used for building a route test.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.IRouteTestBuilder.ShouldMap(System.String)">
            <summary>
            Sets the route location to test.
            </summary>
            <param name="location">Location as string.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IRouteTestBuilder.ShouldMap(System.Uri)">
            <summary>
            Sets the route location to test.
            </summary>
            <param name="location">Location as Uri.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IRouteTestBuilder.ShouldMap(System.Net.Http.HttpRequestMessage)">
            <summary>
            Sets the route HTTP request message to test.
            </summary>
            <param name="requestMessage">Instance of type HttpRequestMessage.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IRouteTestBuilder.ShouldMap(System.Action{MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Sets the route HTTP request message to test using a builder.
            </summary>
            <param name="httpRequestMessageBuilder">Builder for HTTP request message.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="T:MyTested.WebApi.IServerBuilder">
            <summary>
            Provides options to set the HTTP request to test.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.IServerBuilder.WithDefaultRequestHeader(System.String,System.String)">
            <summary>
            Adds default header to every request tested on the server.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="value">Value of the header.</param>
            <returns>The same server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IServerBuilder.WithDefaultRequestHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds default header to every request tested on the server.
            </summary>
            <param name="name">Name of the header.</param>
            <param name="values">Collection of values for the header.</param>
            <returns>The same server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IServerBuilder.WithDefaultRequestHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds default collection of headers to every request tested on the server.
            </summary>
            <param name="headers">Dictionary of headers to add.</param>
            <returns>The same server builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IServerBuilder.WithoutDefaultRequestHeader(System.String)">
            <summary>
            Removes a previously added default header from every request tested on the server.
            </summary>
            <param name="name">Name of the header.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyTested.WebApi.IServerBuilder.WithCancellationTokenSource(System.Threading.CancellationTokenSource)" -->
        <member name="M:MyTested.WebApi.IServerBuilder.WithHttpRequestMessage(System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds HTTP request message to the tested server.
            </summary>
            <param name="requestMessage">Instance of HttpRequestMessage.</param>
            <returns>Server test builder to test the returned HTTP response.</returns>
        </member>
        <member name="M:MyTested.WebApi.IServerBuilder.WithHttpRequestMessage(System.Action{MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Adds HTTP request message to the tested server.
            </summary>
            <param name="httpRequestMessageBuilder">Builder for HTTP request message.</param>
            <returns>Server test builder to test the returned HTTP response.</returns>
        </member>
        <member name="T:MyTested.WebApi.IControllerBuilder`1">
            <summary>
            Used for building the action which will be tested.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.ShouldHave">
            <summary>
            Used for testing controller attributes.
            </summary>
            <returns>Controller test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithHttpConfiguration(System.Web.Http.HttpConfiguration)">
            <summary>
            Sets the HTTP configuration for the current test case.
            </summary>
            <param name="config">Instance of HttpConfiguration.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithHttpRequestMessage(System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds HTTP request message to the tested controller.
            </summary>
            <param name="requestMessage">Instance of HttpRequestMessage.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithHttpRequestMessage(System.Action{MyTested.WebApi.Builders.Contracts.HttpRequests.IHttpRequestMessageBuilder})">
            <summary>
            Adds HTTP request message to the tested controller.
            </summary>
            <param name="httpRequestBuilder">Builder for HTTP request message.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithResolvedDependencyFor``1(``0)">
            <summary>
            Tries to resolve constructor dependency of given type.
            </summary>
            <typeparam name="TDependency">Type of dependency to resolve.</typeparam>
            <param name="dependency">Instance of dependency to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithResolvedDependencies(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Tries to resolve constructor dependencies by the provided collection of dependencies.
            </summary>
            <param name="dependencies">Collection of dependencies to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithResolvedDependencies(System.Object[])">
            <summary>
            Tries to resolve constructor dependencies by the provided dependencies.
            </summary>
            <param name="dependencies">Dependencies to inject into constructor.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithoutValidation">
            <summary>
            Disables ModelState validation for the action call.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithAuthenticatedUser">
            <summary>
            Sets default authenticated user to the built controller with "TestUser" username.
            </summary>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithAuthenticatedUser(System.Security.Principal.IPrincipal)">
            <summary>
            Sets custom authenticated user to the built controller.
            </summary>
            <param name="pricipal">The IPrincipal user to set.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithAuthenticatedUser(System.Action{MyTested.WebApi.Builders.Contracts.Identity.IUserBuilder})">
            <summary>
            Sets custom authenticated user using provided user builder.
            </summary>
            <param name="userBuilder">User builder to create mocked user object.</param>
            <returns>The same controller builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.WithSetup(System.Action{`0})">
            <summary>
            Sets custom properties to the controller using action delegate.
            </summary>
            <param name="controllerSetup">Action delegate to use for controller setup.</param>
            <returns>The same controller test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.Calling``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <typeparam name="TActionResult">Type of result from action.</typeparam>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.CallingAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <typeparam name="TActionResult">Asynchronous Task result from action.</typeparam>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing the action result.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.Calling(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing void actions.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.CallingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Indicates which action should be invoked and tested.
            </summary>
            <param name="actionCall">Method call expression indicating invoked action.</param>
            <returns>Builder for testing void actions.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.AndProvideTheController">
            <summary>
            Gets ASP.NET Web API controller instance to be tested.
            </summary>
            <returns>Instance of the ASP.NET Web API controller.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.AndProvideTheHttpConfiguration">
            <summary>
            Gets the HTTP configuration used in the testing.
            </summary>
            <returns>Instance of HttpConfiguration.</returns>
        </member>
        <member name="M:MyTested.WebApi.IControllerBuilder`1.AndProvideTheHttpRequestMessage">
            <summary>
            Gets the HTTP request message used in the testing.
            </summary>
            <returns>Instance of HttpRequestMessage.</returns>
        </member>
        <member name="T:MyTested.WebApi.AuthenticationScheme">
            <summary>
            Contains default authenticated header schemes.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.AuthenticationScheme.Anonymous">
            <summary>
            Anonymous authenticated header scheme.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.AuthenticationScheme.Basic">
            <summary>
            Basic authenticated header scheme.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.AuthenticationScheme.Digest">
            <summary>
            Digest authenticated header scheme.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.AuthenticationScheme.NTLM">
            <summary>
            NTLM authenticated header scheme.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.AuthenticationScheme.Negotiate">
            <summary>
            Negotiate authenticated header scheme.
            </summary>
        </member>
        <member name="T:MyTested.WebApi.HttpHeader">
            <summary>
            Contains common HTTP request and response header names.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Accept">
            <summary>
            Represents Accept header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.AcceptCharset">
            <summary>
            Represents AcceptCharset header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.AcceptEncoding">
            <summary>
            Represents AcceptEncoding header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.AcceptLanguage">
            <summary>
            Represents AcceptLanguage header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.AcceptRanges">
            <summary>
            Represents AcceptRanges header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Age">
            <summary>
            Represents Age header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Authorization">
            <summary>
            Represents Authorization header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.CacheControl">
            <summary>
            Represents CacheControl header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Connection">
            <summary>
            Represents Connection header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.ConnectionClose">
            <summary>
            Represents ConnectionClose header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Cookie">
            <summary>
            Represents Cookie header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Date">
            <summary>
            Represents Date header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Expect">
            <summary>
            Represents Expect header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.ExpectContinue">
            <summary>
            Represents ExpectContinue header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.From">
            <summary>
            Represents From header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Host">
            <summary>
            Represents Host header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.IfMatch">
            <summary>
            Represents IfMatch header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.IfModifiedSince">
            <summary>
            Represents IfModifiedSince header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.IfNoneMatch">
            <summary>
            Represents IfNoneMatch header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.IfRange">
            <summary>
            Represents IfRange header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.IfUnmodifiedSince">
            <summary>
            Represents IfUnmodifiedSince header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Location">
            <summary>
            Represents Location header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.MaxForwards">
            <summary>
            Represents MaxForwards header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Pragma">
            <summary>
            Represents Pragma header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.ProxyAuthenticate">
            <summary>
            Represents ProxyAuthenticate header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.ProxyAuthorization">
            <summary>
            Represents ProxyAuthorization header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Range">
            <summary>
            Represents Range header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Referrer">
            <summary>
            Represents Referrer header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.RetryAfter">
            <summary>
            Represents RetryAfter header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Server">
            <summary>
            Represents Server header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.SetCookie">
            <summary>
            Represents SetCookie header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.TE">
            <summary>
            Represents TE header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Trailer">
            <summary>
            Represents Trailer header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.TransferEncoding">
            <summary>
            Represents TransferEncoding header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.TransferEncodingChunked">
            <summary>
            Represents TransferEncodingChunked header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Upgrade">
            <summary>
            Represents Upgrade header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.UserAgent">
            <summary>
            Represents UserAgent header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Vary">
            <summary>
            Represents Vary header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Via">
            <summary>
            Represents Via header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.Warning">
            <summary>
            Represents Warning header name.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.HttpHeader.WwwAuthenticate">
            <summary>
            Represents WwwAuthenticate header name.
            </summary>
        </member>
        <member name="T:MyTested.WebApi.MediaType">
            <summary>
            Contains common MIME type values.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.TextPlain">
            <summary>
            Represents text/plain (txt).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.TextHtml">
            <summary>
            Represents text/html (html).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.TextCss">
            <summary>
            Represents text/css (css).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ImageBmp">
            <summary>
            Represents image/bmp (bmp).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ImageJpeg">
            <summary>
            Represents image/jpeg (jpeg or jpg).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ImagePng">
            <summary>
            Represents image/png (png).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ImageGif">
            <summary>
            Represents image/gif (gif).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ApplicationJavaScript">
            <summary>
            Represents "application/x-javascript" (js).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ApplicationJson">
            <summary>
            Represents application/json (json).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ApplicationXml">
            <summary>
            Represents application/xml (xml).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.FormUrlEncoded">
            <summary>
            Represents application/x-www-form-urlencoded.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ApplicationOctetStream">
            <summary>
            Represents application/octet-stream (exe).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.ApplicationZip">
            <summary>
            Represents application/zip (zip).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.AudioMpeg">
            <summary>
            Represents audio/mpeg (mp3).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.AudioVorbis">
            <summary>
            Represents audio/vorbis (ogg).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.VideoAvi">
            <summary>
            Represents video/avi (avi).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.VideoMpeg">
            <summary>
            Represents video/mpeg (mpeg).
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MediaType.VideoQuicktime">
            <summary>
            Represents video/quicktime (qt).
            </summary>
        </member>
        <member name="T:MyTested.WebApi.MyWebApi">
            <summary>
            Starting point of the testing framework, which provides a way to specify the ASP.NET Web API feature to be tested.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MyWebApi.DefaultHost">
            <summary>
            Default host which the tests will use - local host.
            </summary>
        </member>
        <member name="F:MyTested.WebApi.MyWebApi.DefaultPort">
            <summary>
            Default port which the tests will use - 80.
            </summary>
        </member>
        <member name="P:MyTested.WebApi.MyWebApi.Configuration">
            <summary>
            Gets the current global HTTP configuration used in the testing.
            </summary>
            <value>Instance of HttpConfiguration.</value>
        </member>
        <member name="P:MyTested.WebApi.MyWebApi.BaseAddress">
            <summary>
            Gets the current base address used in the testing.
            </summary>
            <value>Instance of String.</value>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.IsUsingDefaultHttpConfiguration">
            <summary>
            Sets the default HttpConfiguration which will be used in all tests.
            </summary>
            <returns>HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.IsUsing(System.Web.Http.HttpConfiguration)">
            <summary>
            Sets the HttpConfiguration which will be used in all tests.
            </summary>
            <param name="httpConfiguration">HttpConfiguration instance used in the testing.</param>
            <returns>HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.IsRegisteredWith(System.Action{System.Web.Http.HttpConfiguration})">
            <summary>
            Sets the action which will register the HttpConfiguration used in all tests.
            </summary>
            <param name="httpConfigurationRegistration">Action to register HttpConfiguration.</param>
            <returns>HTTP configuration builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.Routes(System.Web.Http.HttpConfiguration)">
            <summary>
            Starts a route test.
            </summary>
            <param name="httpConfiguration">Optional HttpConfiguration to use in case one is not configured globally.</param>
            <returns>Route test builder.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.Handler``1">
            <summary>
            Selects HTTP message handler on which the test will be executed. HttpMessageHandler is instantiated with default constructor.
            </summary>
            <typeparam name="THandler">Instance of type HttpMessageHandler.</typeparam>
            <returns>Handler builder used to build the test case.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.Handler(System.Net.Http.HttpMessageHandler)">
            <summary>
            Selects HTTP message handler on which the test will be executed.
            </summary>
            <param name="handler">Instance of the HttpMessageHandler to use.</param>
            <returns>Handler builder used to build the test case.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.Handler(System.Func{System.Net.Http.HttpMessageHandler})">
            <summary>
            Selects HTTP message handler on which the test will be executed. HttpMessageHandler is instantiated using construction function.
            </summary>
            <param name="construction">Construction function returning the instantiated HttpMessageHandler.</param>
            <returns>Handler builder used to build the test case.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.Controller``1">
            <summary>
            Selects controller on which the test will be executed. Controller is instantiated with the globally registered dependency resolver or with its default constructor, if resolving is unsuccessful.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
            <returns>Controller builder used to build the test case.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.Controller``1(``0)">
            <summary>
            Selects controller on which the test will be executed.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
            <param name="controller">Instance of the ASP.NET Web API controller to use.</param>
            <returns>Controller builder used to build the test case.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.Controller``1(System.Func{``0})">
            <summary>
            Selects controller on which the test will be executed. Controller is instantiated using construction function.
            </summary>
            <typeparam name="TController">Class inheriting ASP.NET Web API controller.</typeparam>
            <param name="construction">Construction function returning the instantiated controller.</param>
            <returns>Controller builder used to build the test case.</returns>
        </member>
        <member name="M:MyTested.WebApi.MyWebApi.Server">
            <summary>
            Starts a full ASP.NET Web API pipeline test.
            </summary>
            <returns>Server instance to set the HTTP request and test the HTTP response.</returns>
        </member>
        <member name="T:MyTested.WebApi.Utilities.ExpressionParser">
            <summary>
            Utility class helping parsing expression trees.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.ExpressionParser.GetMethodName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses method name from method call lambda expression.
            </summary>
            <param name="expression">Expression to be parsed.</param>
            <returns>Method name as string.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.ExpressionParser.ResolveMethodArguments(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Resolves arguments from method in method call lambda expression.
            </summary>
            <param name="expression">Expression to be parsed.</param>
            <returns>Collection of method argument information.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.ExpressionParser.ResolveExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            Tries to resolve expression value depending on the expression type.
            </summary>
            <param name="expression">Expression to resolve.</param>
            <returns>Value extracted from the provided expression.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.ExpressionParser.GetMethodAttributes(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Retrieves custom attributes on a method from method call lambda expression.
            </summary>
            <param name="expression">Expression to be parsed.</param>
            <returns>Collection of attributes as objects.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.ExpressionParser.GetPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses member name from member lambda expression.
            </summary>
            <param name="expression">Expression to be parsed.</param>
            <returns>Member name as string.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.ExpressionParser.GetMethodCallExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets method call expression from a lambda expression.
            </summary>
            <param name="expression">The lambda expression as MethodCallExpression.</param>
            <returns>Method call expression.</returns>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Reflection">
            <summary>
            Class for validating reflection checks.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreSameTypes(System.Object,System.Object)">
            <summary>
            Checks whether two objects have the same types.
            </summary>
            <param name="firstObject">First object to be checked.</param>
            <param name="secondObject">Second object to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreSameTypes(System.Type,System.Type)">
            <summary>
            Checks whether two types are different.
            </summary>
            <param name="firstType">First type to be checked.</param>
            <param name="secondType">Second type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreDifferentTypes(System.Object,System.Object)">
            <summary>
            Checks whether two objects have different types.
            </summary>
            <param name="firstObject">First object to be checked.</param>
            <param name="secondObject">Second object to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreDifferentTypes(System.Type,System.Type)">
            <summary>
            Checks whether two types are different.
            </summary>
            <param name="firstType">First type to be checked.</param>
            <param name="secondType">Second type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreAssignable(System.Type,System.Type)">
            <summary>
            Checks whether two types are assignable.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreNotAssignable(System.Type,System.Type)">
            <summary>
            Checks whether two types are not assignable.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.IsGeneric(System.Type)">
            <summary>
            Checks whether a type is generic.
            </summary>
            <param name="type">Type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.IsNotGeneric(System.Type)">
            <summary>
            Checks whether a type is not generic.
            </summary>
            <param name="type">Type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.IsGenericTypeDefinition(System.Type)">
            <summary>
            Checks whether a type is generic definition.
            </summary>
            <param name="type">Type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreAssignableByGeneric(System.Type,System.Type)">
            <summary>
            Checks whether two types are assignable by generic definition.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.HaveDifferentGenericArguments(System.Type,System.Type)">
            <summary>
            Checks whether two generic types have different generic arguments.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.ContainsGenericTypeDefinitionInterface(System.Type,System.Type)">
            <summary>
            Checks whether generic definition contains an base interface generic definition.
            </summary>
            <param name="baseType">Base type to be checked.</param>
            <param name="inheritedType">Inherited type to be checked.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.CastTo``1(System.Type,System.Object)">
            <summary>
            Performs dynamic casting from type to generic result.
            </summary>
            <typeparam name="TResult">Result type from casting.</typeparam>
            <param name="type">Type from which the casting should be done.</param>
            <param name="data">Object from which the casting should be done.</param>
            <returns>Casted object of type TResult.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.ToFriendlyTypeName(System.Type)">
            <summary>
            Transforms generic type name to friendly one, showing generic type arguments.
            </summary>
            <param name="type">Type which name will be transformed.</param>
            <returns>Transformed name as string.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.TryFastCreateInstance``1">
            <summary>
            Tries to create fast instance from type with constructor without parameters by using cached expression built delegates.
            </summary>
            <typeparam name="T">Type of the created instance.</typeparam>
            <returns>Created instance or null, if no constructor without parameters is found.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.TryCreateInstance``1(System.Object[])">
            <summary>
            Tries to create instance of type T by using the provided unordered constructor parameters.
            </summary>
            <typeparam name="T">Type of the created instance.</typeparam>
            <param name="constructorParameters">Unordered constructor parameters.</param>
            <returns>Created instance or null, if no suitable constructor is found.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.GetCustomAttributes(System.Object)">
            <summary>
            Gets custom attributes on the provided object.
            </summary>
            <param name="obj">Object decorated with custom attributes.</param>
            <returns>IEnumerable of objects representing the custom attributes.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.GetCustomAttributes(System.Reflection.MethodInfo)">
            <summary>
            Gets custom attributes on the provided method info.
            </summary>
            <param name="method">MethodInfo from which the custom attributes will be retrieved.</param>
            <returns>IEnumerable of objects representing the custom attributes.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreDeeplyEqual(System.Object,System.Object)">
            <summary>
            Checks whether two objects are deeply equal by reflecting all their public properties recursively. Resolves successfully value and reference types, overridden Equals method, custom == operator, IComparable, nested objects and collection properties.
            </summary>
            <param name="expected">Expected object.</param>
            <param name="actual">Actual object.</param>
            <returns>True or false.</returns>
            <remarks>This method is used for the route testing. Since the ASP.NET Web API model binder creates new instances, circular references are not checked.</remarks>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Reflection.AreNotDeeplyEqual(System.Object,System.Object)">
            <summary>
            Checks whether two objects are not deeply equal by reflecting all their public properties recursively. Resolves successfully value and reference types, overridden Equals method, custom == operator, IComparable, nested objects and collection properties.
            </summary>
            <param name="expected">Expected object.</param>
            <param name="actual">Actual object.</param>
            <returns>True or false.</returns>
            <remarks>This method is used for the route testing. Since the ASP.NET Web API model binder creates new instances, circular references are not checked.</remarks>
        </member>
        <member name="T:MyTested.WebApi.Utilities.RouteResolvers.InternalRouteResolver">
            <summary>
            Used for resolving HTTP request message to a route.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.RouteResolvers.InternalRouteResolver.Resolve(System.Web.Http.HttpConfiguration,System.Net.Http.HttpRequestMessage)">
            <summary>
            Resolves HTTP request message to a route using the provided HTTP configuration and the internal ASP.NET Web API route resolving algorithm.
            </summary>
            <param name="config">HttpConfiguration to use.</param>
            <param name="request">HttpRequestMessage to resolve.</param>
            <returns>Resolved route information.</returns>
        </member>
        <member name="T:MyTested.WebApi.Utilities.RouteResolvers.RouteExpressionParser">
            <summary>
            Used for parsing lambda expression to route values.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.RouteResolvers.RouteExpressionParser.Parse``1(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses route values from a lambda expression.
            </summary>
            <typeparam name="TController">Type of API Controller.</typeparam>
            <param name="lambdaExpression">The lambda expression to parse.</param>
            <returns>Parsed route information.</returns>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.AttributesValidator">
            <summary>
            Validator class containing attributes validation logic.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.AttributesValidator.ValidateNoAttributes(System.Collections.Generic.IEnumerable{System.Object},System.Action{System.String,System.String})">
            <summary>
            Validates whether the provided collection of attributes contains zero elements.
            </summary>
            <param name="attributes">Collection of attributes to validate.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.AttributesValidator.ValidateNumberOfAttributes(System.Collections.Generic.IEnumerable{System.Object},System.Action{System.String,System.String},System.Nullable{System.Int32})">
            <summary>
            Validates if any attributes are contained in the provided collection of attributes.
            </summary>
            <param name="attributes">Collection of attributes to validate.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <param name="withTotalNumberOf">Optional parameter specifying the exact number of expected attributes.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.AttributesValidator.ValidateAttributes(System.Collections.Generic.IEnumerable{System.Object},MyTested.WebApi.Builders.Attributes.BaseAttributesTestBuilder,System.Action{System.String,System.String})">
            <summary>
            Validation collection attribute based on attribute test builder.
            </summary>
            <param name="attributes">Collection of attributes to validate.</param>
            <param name="attributesTestBuilder">Test builder containing attribute specific validation.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.CommonValidator">
            <summary>
            Validator class containing common validation logic.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.CommonValidator.CheckForNullReference(System.Object,System.String)">
            <summary>
            Validates object for null reference.
            </summary>
            <param name="value">Object to be validated.</param>
            <param name="errorMessageName">Name of the parameter to be included in the error message.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.CommonValidator.CheckForNotWhiteSpaceString(System.String,System.String)">
            <summary>
            Validates string for null reference or whitespace.
            </summary>
            <param name="value">String to be validated.</param>
            <param name="errorMessageName">Name of the parameter to be included in the error message.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.CommonValidator.CheckForEqualityWithDefaultValue``1(``0,System.String)">
            <summary>
            Validates whether the provided value is not null or equal to the type's default value.
            </summary>
            <typeparam name="T">Type of the provided value.</typeparam>
            <param name="value">Value to be validated.</param>
            <param name="errorMessage">Error message if the validation fails.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.CommonValidator.CheckForException(System.Exception)">
            <summary>
            Validated whether a non-null exception is provided and throws ActionCallAssertionException with proper message.
            </summary>
            <param name="exception">Exception to be validated.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.CommonValidator.CheckEquality``1(``0,``0)">
            <summary>
            Validates that two objects are equal using the Equals method.
            </summary>
            <typeparam name="T">Type of the objects.</typeparam>
            <param name="expected">Expected object.</param>
            <param name="actual">Actual object.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.CommonValidator.CheckForDefaultValue``1(``0)">
            <summary>
            Validates whether object equals the default value for its type.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="value">Object to test.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.CommonValidator.CheckIfTypeCanBeNull(System.Type)">
            <summary>
            Validates whether type can be null.
            </summary>
            <param name="type">Type to check.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.ContentNegotiatorValidator">
            <summary>
            Validator class containing IContentNegotiator validation logic.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.ContentNegotiatorValidator.ValidateContentNegotiator(System.Object,System.Net.Http.Formatting.IContentNegotiator,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the IContentNegotiator from action result containing one.
            </summary>
            <param name="actionResult">Action result with IContentNegotiator.</param>
            <param name="contentNegotiator">Expected IContentNegotiator.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.HttpConfigurationValidator">
            <summary>
            Validates HTTP configuration.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpConfigurationValidator.ValidateGlobalConfiguration(System.String)">
            <summary>
            Validates global configuration whether it is null or not and gives appropriate exception message if not.
            </summary>
            <param name="testCase">Name of the test case to use in the message.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.HttpRequestMessageValidator">
            <summary>
            Validator class containing HTTP request message validations.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpRequestMessageValidator.ValidateContent(System.Net.Http.HttpRequestMessage)">
            <summary>
            Checks whether content headers can be added to a HttpRequestMessage.
            </summary>
            <param name="requestMessage">HttpRequestMessage to validate.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator">
            <summary>
            Validator class containing HTTP response message validation logic.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.WithContentOfType``1(System.Net.Http.HttpContent,System.Action{System.String,System.String,System.String})">
            <summary>
            Tests whether the content of the HTTP response message is of certain type.
            </summary>
            <typeparam name="TContentType">Type of expected HTTP content.</typeparam>
            <param name="content">Actual HTTP content.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.WithStringContent(System.Net.Http.HttpContent,System.String,System.Action{System.String,System.String,System.String})">
            <summary>
            Tests whether the content of the HTTP response message contains the provided string.
            </summary>
            <param name="actualContent">Actual HTTP content.</param>
            <param name="expectedContent">Expected string content.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.ValidateContent(System.Net.Http.HttpContent,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates HTTP content for not null reference.
            </summary>
            <param name="content">HTTP content to validate.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.ContainingHeader(System.Net.Http.Headers.HttpHeaders,System.String,System.Action{System.String,System.String,System.String},System.Boolean)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name.
            </summary>
            <param name="headers">HTTP headers.</param>
            <param name="name">Name of expected response header.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <param name="isContentHeader">Indicates whether the header is content header.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.ContainingHeader(System.Net.Http.Headers.HttpHeaders,System.String,System.String,System.Action{System.String,System.String,System.String},System.Boolean)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and value.
            </summary>
            <param name="headers">HTTP headers.</param>
            <param name="name">Name of expected response header.</param>
            <param name="value">Value of expected response header.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <param name="isContentHeader">Indicates whether the header is content header.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.ContainingHeader(System.Net.Http.Headers.HttpHeaders,System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{System.String,System.String,System.String},System.Boolean)">
            <summary>
            Tests whether the HTTP response message contains response header with certain name and collection of value.
            </summary>
            <param name="headers">HTTP headers.</param>
            <param name="name">Name of expected response header.</param>
            <param name="values">Collection of values in the expected response header.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <param name="isContentHeader">Indicates whether the header is content header.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.ValidateHeadersCount(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},System.Net.Http.Headers.HttpHeaders,System.Action{System.String,System.String,System.String},System.Boolean)">
            <summary>
            Validates total number of HTTP headers.
            </summary>
            <param name="expectedHeaders">Expected HTTP headers.</param>
            <param name="actualHeaders">Actual HTTP headers.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <param name="isContentHeaders">Indicates whether the headers are content headers.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.WithResponseModel``1(System.Net.Http.HttpContent,``0,System.Action{System.String,System.String,System.String},System.Func{System.String,System.String,MyTested.WebApi.Exceptions.ResponseModelAssertionException})">
            <summary>
            Tests whether a deeply equal object to the provided one is returned from the invoked HTTP response message content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="content">Actual HTTP content.</param>
            <param name="expectedModel">Expected model to be returned.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <param name="failedResponseModelValidationAction">Function returning exception, in case of failed response model validation.</param>
            <returns>The actual HTTP response model.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.GetActualContentModel``1(System.Net.Http.HttpContent,System.Func{System.String,System.String,MyTested.WebApi.Exceptions.ResponseModelAssertionException})">
            <summary>
            Gets the actual response model from HTTP content.
            </summary>
            <typeparam name="TResponseModel">Type of the response model.</typeparam>
            <param name="content">Actual HTTP content.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <returns>The actual HTTP response model.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.WithStatusCode(System.Net.Http.HttpResponseMessage,System.Net.HttpStatusCode,System.Action{System.String,System.String,System.String})">
            <summary>
            Tests whether HTTP response message status code is the same as the provided HttpStatusCode.
            </summary>
            <param name="httpResponseMessage">HTTP response message to test.</param>
            <param name="statusCode">Expected status code.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.WithVersion(System.Net.Http.HttpResponseMessage,System.Version,System.Action{System.String,System.String,System.String})">
            <summary>
            Tests whether HTTP response message version is the same as the provided version.
            </summary>
            <param name="httpResponseMessage">HTTP response message to test.</param>
            <param name="version">Expected version.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.WithReasonPhrase(System.Net.Http.HttpResponseMessage,System.String,System.Action{System.String,System.String,System.String})">
            <summary>
            Tests whether HTTP response message reason phrase is the same as the provided reason phrase as string.
            </summary>
            <param name="httpResponseMessage">HTTP response message to test.</param>
            <param name="reasonPhrase">Expected reason phrase as string.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.HttpResponseMessageValidator.WithSuccessStatusCode(System.Net.Http.HttpResponseMessage,System.Action{System.String,System.String,System.String})">
            <summary>
            Tests whether HTTP response message returns success status code between 200 and 299.
            </summary>
            <param name="httpResponseMessage">HTTP response message to test.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.LocationValidator">
            <summary>
            Validator class containing URI validation logic.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.LocationValidator.ValidateAndGetWellFormedUriString(System.String,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates an URI provided as string.
            </summary>
            <param name="location">Expected URI as string.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <returns>Valid Uri created from the provided string.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.LocationValidator.ValidateUri(System.Object,System.Uri,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the Uri from action result containing one.
            </summary>
            <param name="actionResult">Action result with Uri.</param>
            <param name="location">Expected Uri.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.LocationValidator.ValidateLocation(System.Object,System.Action{MyTested.WebApi.Builders.Uris.MockedUriTestBuilder},System.Action{System.String,System.String,System.String})">
            <summary>
            Validates URI by using UriTestBuilder.
            </summary>
            <param name="actionResult">Dynamic representation of action result.</param>
            <param name="uriTestBuilder">UriTestBuilder for validation.</param>
            <param name="failedValidationAction">Action to execute, if the validation fails.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.MediaTypeFormatterValidator">
            <summary>
            Validator class containing MediaTypeFormatter validation logic.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.MediaTypeFormatterValidator.GetDefaultMediaTypeFormatters">
            <summary>
            Returns default media type formatters used in ASP.NET Web API.
            </summary>
            <returns>Enumerable of MediaTypeFormatter.</returns>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.MediaTypeFormatterValidator.ValidateMediaTypeFormatter(System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the Formatters from action result containing one.
            </summary>
            <param name="actionResult">Action result with Formatters.</param>
            <param name="mediaTypeFormatter">Expected MediaTypeFormatter.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.MediaTypeFormatterValidator.ValidateMediaTypeFormatters(System.Object,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the Formatters from action result containing one.
            </summary>
            <param name="actionResult">Action result with Formatters.</param>
            <param name="mediaTypeFormatters">Expected enumerable of MediaTypeFormatter.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.MediaTypeFormatterValidator.ValidateMediaTypeFormattersBuilder(System.Object,System.Action{MyTested.WebApi.Builders.Contracts.Formatters.IFormattersBuilder},System.Action{System.String,System.String,System.String})">
            <summary>
            Validates the Formatters from action result containing one.
            </summary>
            <param name="actionResult">Action result with Formatters.</param>
            <param name="formattersBuilder">Formatters builder.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.RouteValidator">
            <summary>
            Validator class containing route URI validator.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.RouteValidator.Validate``1(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.LambdaExpression,System.Action{System.String,System.String,System.String})">
            <summary>
            Validates whether route generated URI is the same as action call generated URI.
            </summary>
            <typeparam name="TController">Type of expected redirect controller.</typeparam>
            <param name="request">HttpRequestMessage to use for generating the route URI.</param>
            <param name="routeName">Route name from the HTTP configuration routes.</param>
            <param name="routeValues">Route values dictionary of string-object pairs.</param>
            <param name="expectedActionCall">Method call expression indicating the expected action.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.RuntimeBinderValidator">
            <summary>
            Validator class containing dynamic action result calls validation logic.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.RuntimeBinderValidator.ValidateBinding(System.Action)">
            <summary>
            Validates action call for RuntimeBinderException.
            </summary>
            <param name="action">Action to validate.</param>
        </member>
        <member name="T:MyTested.WebApi.Utilities.Validators.VersionValidator">
            <summary>
            Validator class containing Version validation logic.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.Utilities.Validators.VersionValidator.TryParse(System.String,System.Action{System.String,System.String,System.String})">
            <summary>
            Tries to parse version from string.
            </summary>
            <param name="version">Provided version string.</param>
            <param name="failedValidationAction">Action to call in case of failed validation.</param>
            <returns>Valid Version from the provided string.</returns>
        </member>
        <member name="T:MyTested.WebApi.With">
            <summary>
            Provides easier parameter selection in lambda expression where the value of the parameter does not matter.
            </summary>
        </member>
        <member name="M:MyTested.WebApi.With.Any``1">
            <summary>
            Provides any parameter to lambda expression where the value of the parameter does not matter.
            </summary>
            <typeparam name="TParameter">Type of parameter.</typeparam>
            <returns>Default value of TParameter.</returns>
            <remarks>Using this method in route testing will indicate that the route value should be ignored during the test.</remarks>
        </member>
    </members>
</doc>
